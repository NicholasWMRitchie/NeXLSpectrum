## Quick Quantifying K412 using NeXLSpectrum VectorQuant

Fred Schamber taught me this trick for quantifying spectrum extremely quickly.  It works reasonably well
for a moderate number of ROIs, particularly when few of the ROIs interfere.

Use the NeXLSpectrum to load, plot, fit and report the quantification of a set of K412 spectra.

Loading `NeXLSpectrum` also automatically makes `NeXLCore` and `NeXLUncertainties` available.

Loading the `Gadfly` library adds plotting support to `NeXLSpectrum`.

```julia
using NeXLSpectrum              # Provides spectrum reading and fitting tools
using NeXLMatrixCorrection      # Provides `quant` to convert k-ratios to mass fraction.
using Gadfly                    # Plotting
using DataFrames, Latexify      # Tables
```
#### Read in the Spectra
```julia
path = joinpath(@__DIR__, "K412 spectra")
# Load the unknowns 
unks = map(0:4) do i
  loadspectrum(joinpath(path, "III-E K412[$i][4].msa"))
end
# Create a detector model to match the unknown spectra
det = matching(unks[1], 132.0, 10)
```
```julia; echo=false
latexify(asa(DataFrame, unks), env=:mdtable, latex=false, fmt="%0.4g")
```
Notice that the spectra all have 1) live-time (`:LiveTime`); 2) probe-current (`:ProbeCurrent`); 3) take-off angle
(`:TakeOffAngle`); 4) beam energy (`:BeamEnergy`); and detector (`:Detector`) properties defined.  These properties
are necessary for extracting the k-ratios and estimating the composition.
```julia
unks[1][:LiveTime], unks[1][:ProbeCurrent], unks[1][:TakeOffAngle], unks[1][:BeamEnergy]
```
#### The Unknowns
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
display(plot(unks..., klms=[n"O",n"Mg",n"Al",n"Si",n"Ca",n"Fe"], xmax=8.0e3))
```
#### The Reference Spectra
Build a convenient structure so it is easy to appreciate the necessary information and to splat it into
`filteredReference`.
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
ffrs = references( [
  reference(n"Al", joinpath(path, "Al2O3 std.msa"), mat"Al2O3" ), #
  reference(n"Mg", joinpath(path, "MgO std.msa"), mat"MgO" ),   #
  reference(n"Fe", joinpath(path, "Fe std.msa"), mat"Fe" ),    #
  reference(n"Si", joinpath(path, "SiO2 std.msa"), mat"SiO2" ),  #
  reference(n"O", joinpath(path, "SiO2 std.msa"), mat"SiO2" ),  #
  reference(n"Ca", joinpath(path, "CaF2 std.msa"), mat"CaF2" ) 
], det)
display(plot( spectra(ffrs)..., klms= [n"O",n"Mg",n"Al",n"Si",n"Ca",n"Fe"], xmax=8.0e3))
```

#### Filter the Reference Spectra and Compute the VectorQuant Structure
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
vq = VectorQuant(ffrs)
plot(vq, 1:800)
```

Let's take a look at a residual spectrum by plotting one of the `FilterFitResult` objects.
Perform the fit and look at the residual
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
res = map(unks) do unk
  fit_spectrum(vq, unk)
end
plot(res[1])
```

#### Compare this with the weighted fit
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
resfull = map(unks) do unk
  fit_spectrum(unk, ffrs)
end
plot(resfull[1])
```

Now the full data set...
```julia; echo=false
display(latexify(asa(DataFrame, res, withUnc=true), env=:mdtable, latex=false, fmt="%0.4g"))
```
```julia; echo=false
display(latexify(asa(DataFrame, resfull, withUnc=true), env=:mdtable, latex=false, fmt="%0.4g"))
```

Compare the timings (full then fast)
```julia
using BenchmarkTools
@btime map(unk->fit_spectrum(unk, ffrs), unks)
@btime map(unk->fit_spectrum(vq, unk), unks)
```
