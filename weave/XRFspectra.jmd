# Fitting a Stainless Steel XRF Spectrum
Load the necessary libraries.

```julia
using NeXLSpectrum
using Gadfly           # For plotting. I've added spectrum support.
using DataFrames, Latexify       # For tables.

```
Load the spectra from EMSA files.
```julia
path = joinpath(@__DIR__, "XRF Stainless")
# We use map to apply `readEMSA` to each of the files
specs = steel, fe, ni, cr, ti, si, s, sn = map(fn->loadspectrum(joinpath(path, fn)), (
  "Steel_50kv_50_ma_Rh_vac_D1.msa",
  "Fe_50kv_50_ma_Rh_vac_D1.msa",
  "Ni_50kv_50_ma_Rh_vac_D1.msa",
  "Cr_50kv_50_ma_Rh_vac_D1.msa",
  "Ti_50kv_50_ma_Rh_vac_D1.msa",
  "Si_50kv_50_ma_Rh_vac_D1.msa",
  "S_50kv_50_ma_Rh_vac_D1.msa",
  "Sn_50kv_50_ma_Rh_vac_D1.msa",));
```
```julia; echo=false
latexify(asa(DataFrame, Spectrum[ specs... ]), env=:mdtable, latex=false, fmt="%0.4g")
```

```julia; fig_height=3; fig_width=10; fig_ext=".svg";
plot(specs..., xmax=25.0e3,klms=[n"Fe",n"Cr",n"Ni",n"Ti", n"Si",n"S", n"Mo", n"Rh"])
```

```julia; fig_height=3; fig_width=10; fig_ext=".svg";
display(plot(steel,xmax=25.0e3, yscale=1.1,klms=[n"Fe",n"Cr",n"Ni",n"Ti", n"Si",n"S", n"Mo", n"Rh"]))
display(plot(steel,xmax=25.0e3, yscale=0.01,klms=[n"Fe",n"Cr",n"Ni",n"Ti", n"Si",n"S", n"Mo", n"Rh"]))
```
Build the filtered references which will be fit to the steel unknown.
```julia
# This Dict defines which is the lowest z element which can be measured for the K, L, M, N shells
firstelm = Dict(KShell=>n"Na", LShell=>n"Zn", MShell=>n"Sm", NShell=>n"Og")
# Build a detector to match the steel spectrum
det = matching(steel, steel[:FWHMMnKa], 120, firstelm)
# Build a 'VariableWidthFilter' top-hat filter to suit the detector
filt = buildfilter(VariableWidthFilter,det)
refdata = (
  # ( spectrum, element, material ), # The ordering of `refdata` allows us to splat it into `filterreference(...)`
  ( fe, n"Fe", mat"Fe" ),
  ( cr, n"Cr", mat"Cr" ),
  ( ni, n"Ni", mat"Ni" ),
  ( ti, n"Ti", mat"Ti" ),
  ( si, n"Si", mat"Si" ),
  ( s, n"S", mat"S" ),
  ( sn, n"Sn", mat"Sn" ),
)
# Some necessary properties are missing from the spectra so provide them.
xtra = Dict{Symbol,Any}(:BeamEnergy=>40.0e3, :ProbeCurrent=>1.0, :Detector=>det)
refs = mapreduce(append!, refdata) do (sp, el, mat)
  filterreference(filt, sp, el, mat, props=xtra)
end
# Merge the missing properties into the unknown too.
merge!(steel.properties, xtra)
res = fit_spectrum(steel, filt, refs, false)
# Tabulate the results
```
```julia; echo=false
latexify(asa(DataFrame, res), env=:mdtable, latex=false, fmt="%0.4g")
```
Plot the residual spectrum.  Note that Mo and Rh were not fit and so there remain significant peaks between 16 and
20 keV.
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
plot(res)
```
