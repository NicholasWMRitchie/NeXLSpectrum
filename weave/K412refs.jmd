## Quantifying K412 using NeXLSpectrum and NeXLMatrixCorrection

This document demonstrates the high-level API for filter fitting spectra.  This API is less flexible than
the low-level API discussed [here](K412fit.md).

#### Libraries
Use the NeXLSpectrum to load, plot, fit and report the quantification of a set of K412 spectra.

Loading `NeXLSpectrum` also automatically makes `NeXLCore` and `NeXLUncertainties` available.

Loading the `Gadfly` library adds plotting support to `NeXLSpectrum`.

```julia
using NeXLSpectrum              # Provides spectrum reading and fitting tools
using NeXLMatrixCorrection      # Provides `quant` to convert k-ratios to mass fraction.
using Gadfly                    # Plotting
using DataFrames, Latexify      # Tables
```
#### The `reference` and `references` functions
Use the `reference` and `references` functions to build the filtered references.
```julia
# Where to find the files relative to this script file.
path = joinpath(@__DIR__, "K412 spectra")

refs = references(
  [
    # Specify a reference for iron (arg 1), in "Fe std.msa" (arg2) that is pure iron (arg3).
    reference(n"Fe", joinpath(path, "Fe std.msa"), mat"Fe"),
    # specify a conductive surface coating layer using the `coating` named argument
    reference(n"Si", joinpath(path, "SiO2 std.msa"), mat"SiO2", coating = Film(pure(n"C"), 10.0e-7)),
    reference(n"O", joinpath(path, "SiO2 std.msa"), mat"SiO2", coating = Film(pure(n"C"), 10.0e-7)),
    reference(n"Ca", joinpath(path, "CaF2 std.msa"), mat"CaF2", coating = Film(pure(n"C"), 10.0e-7)),
    # Read the composition from the spectrum file's ##D2STDCMP tag
    reference(n"Mg", joinpath(path, "MgO std.msa"), coating = Film(pure(n"C"), 10.0e-7)),
    # Read the conductive coating from the spectrum file's ##CONDCOATING tag
    reference(n"Al", joinpath(path, "Al2O3 std.msa"), mat"Al2O3"),
  ],
  132.0  # Detector resolution at Mn KÎ± (eV)
)
```

#### Load the Unknowns
```julia
# Now load all the unknown spectra and assign a carbon coating`
unks = map(0:4) do i 
    s = loadspectrum(joinpath(path, "III-E K412[$i][4].msa"))
    # assign a carbon coating
    s[:Coating] = Film(pure(n"C"), 30.0e-7)
    s
end
```

Table: The spectra
```julia; echo=false
latexify(asa(DataFrame, Spectrum[unks..., NeXLSpectrum.spectra(refs)...]), env=:mdtable, latex=false, fmt="%0.4g")
```

Notice that the spectra all have 1) live-time (`:LiveTime`); 2) probe-current (`:ProbeCurrent`); 3) take-off angle
(`:TakeOffAngle`); 4) beam energy (`:BeamEnergy`); and detector (`:Detector`) properties defined.  These properties
are necessary for extracting the k-ratios and estimating the composition.
```julia
u=unks[1]
u[:LiveTime], u[:ProbeCurrent], u[:TakeOffAngle], u[:BeamEnergy], u[:Coating]
```

#### The Unknowns
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
display(plot(unks..., klms=[n"O",n"Mg",n"Al",n"Si",n"Ca",n"Fe"], xmax=8.0e3))
```
#### The Reference Spectra
Plot the reference spectra...
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
plot(spectra(refs)..., klms=collect(elms(refs)), xmax=8.0e3)
```

#### Fit the Pre-Filtered References to the Unknowns
```julia
res= [ fit_spectrum(u,refs) for u in unks ]
```
```julia; echo=false
latexify(asa(DataFrame, res), env=:mdtable, latex=false, fmt="%0.4g")
```

Let's take a look at a residual spectrum by plotting one of the `FilterFitResult` objects.
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
plot(res[1])
```

#### Quantify the k-ratios by Matrix Correction
```julia
quant = quantify.(res)
```
```julia; echo=false
latexify(asa(DataFrame, quant), env=:mdtable, latex=false, fmt="%0.4g")
```

Finally plot the results as mass fractions.
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
plot(quant, known=unks[1][:Composition])
```

Plot the difference from the SRM value.
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
plot(quant, known=unks[1][:Composition], delta=true)
```

Plot the difference from the mean value for each element.
```julia; fig_height=3; fig_width=10; fig_ext=".svg";
plot(quant, delta=true)
```
