### How good are the fit uncertainty estimates?

This document looks at two different sets of measured spectra to evaluate how well, the estimated fit uncertainties
match the observed uncertainties.  We are using two materials known to be highly homogeneous - K412 and ADM-6006a
glasses.  To produce a set of spectra that differ only in count statistics, we will subdivide a spectrum into
100 spectra with an effective live-time of 0.01 of the original spectrum livetime.  We expect that we should be
able to compare the "fit-predicted" uncertainties with the "observed distribution" of measured values.

To be clear:
  - "fit-predicted" - Comes from the covariance matrix output from the linear least squares fit
  - "observed distribution" - Calculated as the standard-deviation of the 100 fit values.

We want the ratio of the (observed distribution) / (fit predicted) to be unity or close.  We will call this ratio the
"heterogeneity" (or "hetero" in the fourth column of the `describe(....)` table.)

We then repeat the process on the multiple measured unknown spectra. (4 for K412 and 15 for ADM-6005a)  We expect
the heterogeneity to be one or larger - larger than unity when the sample is not perfectly homogeneous.

```julia
using NeXLSpectrum              # Provides spectrum reading and fitting tools
using NeXLMatrixCorrection      # Provides `quant` to convert k-ratios to mass fraction.
using DataFrames                # Tables
using Latexify
using BenchmarkTools
```

###### K412
Load the spectra, define the fit model and apply it.
```julia
path = joinpath(@__DIR__,"K412 spectra")
unks = map(0:4) do i 
  loadspectrum(joinpath(path, "III-E K412[$i][4].msa"))
end
det = matching(unks[1], 132.0, 10)
frs = references( [
  reference(n"Al", joinpath(path, "Al2O3 std.msa"), mat"Al2O3"),
  reference(n"Mg", joinpath(path, "MgO std.msa"), mat"MgO"),
  reference(n"Fe", joinpath(path, "Fe std.msa"), mat"Fe"),
  reference(n"Si", joinpath(path, "SiO2 std.msa"), mat"SiO2"),
  reference(n"O", joinpath(path, "SiO2 std.msa"), mat"SiO2"),
  reference(n"Ca", joinpath(path, "CaF2 std.msa") ,mat"CaF2")
], det)
# frs is now a FilteredReference[] used to fit the unknowns.

# Split the counts in unks[1] into 100 randomized spectra which will sum to unks[1] then fit them
res = map(subdivide(unks[1], 100)) do s
  fit_spectrum(s, frs)
end
```
```julia; echo=false
display(latexify(asa(DataFrame, res[1:10], withUnc=true), env=:mdtable, latex=false, fmt="%0.4g"))
```
```julia; echo=false
display(latexify(describe(res),env=:mdtable, latex=false, fmt="%0.4g"))
```

Repeat the fit for the 4 measured unknowns.
```julia
res= map(unks) do s
  fit_spectrum(s, frs)
end
```
```julia; echo=false
display(latexify(asa(DataFrame, res, withUnc=true), env=:mdtable, latex=false, fmt="%0.4g"))
```
Summary statistics.
```julia; echo=false
display(latexify(describe(res), env=:mdtable, latex=false, fmt="%0.4g"))
```
```julia
@btime fit_spectrum(unks[1], frs)
```

###### AMM-6005a
Repeat using the ADM glass.  Fe is not present in ADM-6005a but we fit it to see what a null result looks like.
```julia
path = normpath(joinpath(@__DIR__, "..","test","ADM6005a spectra"))
unks = map(i->loadspectrum(joinpath(path,"ADM-6005a_$i.msa")),1:15)
al, caf2, fe, ge, si, sio2, ti, zn = map(f->loadspectrum(joinpath(path,"$f.msa")), ("Al std", "CaF2 std", "Fe std", "Ge std", "Si std", "SiO2 std", "Ti trimmed","Zn std"))

det = matching(unks[1], 132.0, 10)

frs = references( [
  reference(n"Al", al, mat"Al" ), #
  reference(n"Ca", caf2, mat"CaF2" ),   #
  reference(n"Fe", fe, mat"Fe" ),    #
  reference(n"Ge", ge, mat"Ge" ),    #
  reference(n"Si", si, mat"Si" ),  #
  reference(n"O", sio2, mat"SiO2" ),  #
  reference(n"Ti", ti, mat"Ti" ),
  reference(n"Zn", zn, mat"Zn" ) 
], det)

ss = 
res= map(subdivide(unks[1], 100)) do s
  fit_spectrum(s, frs)
end
```
```julia; echo=false
display(latexify(asa(DataFrame, res[1:10], withUnc=true), env=:mdtable, latex=false, fmt="%0.4g"))
```
Summary statistics.
```julia; echo=false
display(latexify(describe(res), env=:mdtable, latex=false, fmt="%0.4g"))
```

Repeat for the 15 measured spectra.
```julia
res= map(unks) do s
  fit_spectrum(s, frs)
end
```
```julia; echo=false
display(latexify(asa(DataFrame, res, withUnc=true), env=:mdtable, latex=false, fmt="%0.4g"))
```
Summary statistics.
```julia; echo=false
display(latexify(describe(res), env=:mdtable, latex=false, fmt="%0.4g"))
```
```julia;
@btime fit_spectrum(unks[1], frs)
```
