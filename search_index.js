var documenterSearchIndex = {"docs":
[{"location":"errorbars/#How-good-are-the-fit-uncertainty-estimates?","page":"Lovely Error Bars","title":"How good are the fit uncertainty estimates?","text":"","category":"section"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"This document looks at two different sets of measured spectra to evaluate how well, the estimated fit uncertainties match the observed uncertainties.  We are using two materials known to be highly homogeneous - K412 and ADM-6006a glasses.  To produce a set of spectra that differ only in count statistics, we will subdivide a spectrum into 100 spectra with an effective live-time of 0.01 of the original spectrum livetime.  We expect that we should be able to compare the \"fit-predicted\" uncertainties with the \"observed distribution\" of measured values.","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"To be clear:","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"\"fit-predicted\" - Comes from the covariance matrix output from the linear least squares fit\n\"observed distribution\" - Calculated as the standard-deviation of the 100 fit values.","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"We want the ratio of the (observed distribution) / (fit predicted) to be unity or close.  We will call this ratio the \"heterogeneity\" (or \"hetero\" in the fourth column of the describe(....) table.)","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"We then repeat the process on the multiple measured unknown spectra. (4 for K412 and 15 for ADM-6005a)  We expect the heterogeneity to be one or larger - larger than unity when the sample is not perfectly homogeneous.","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"using NeXLSpectrum              # Provides spectrum reading and fitting tools\nusing NeXLMatrixCorrection      # Provides `quant` to convert k-ratios to mass fraction.\nusing DataFrames                # Tables\nusing Latexify\nusing BenchmarkTools","category":"page"},{"location":"errorbars/#K412","page":"Lovely Error Bars","title":"K412","text":"","category":"section"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Load the spectra, define the fit model and apply it.","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"path = \"K412 spectra\"\nfe = loadspectrum(joinpath(path, \"Fe std.msa\"))\ndet = matching(fe, 132.0, 10)\nunks = (i->loadspectrum(joinpath(path, \"III-E K412[$i][4].msa\"),det)).(0:4)\nal2o3 = loadspectrum(joinpath(path, \"Al2O3 std.msa\"),det)\ncaf2 = loadspectrum(joinpath(path, \"CaF2 std.msa\"),det)\nfe = loadspectrum(joinpath(path, \"Fe std.msa\"),det)\nmgo = loadspectrum(joinpath(path, \"MgO std.msa\"),det)\nsio2 = loadspectrum(joinpath(path, \"SiO2 std.msa\"),det)\n\nrefs = (\n  # spectrum, element, composition\n  ( al2o3, n\"Al\", mat\"Al2O3\" ), #\n  ( mgo,   n\"Mg\", mat\"MgO\" ),   #\n  ( fe,    n\"Fe\", mat\"Fe\" ),    #\n  ( sio2,  n\"Si\", mat\"SiO2\" ),  #\n  ( sio2,  n\"O\",  mat\"SiO2\" ),  #\n  ( caf2,  n\"Ca\", mat\"CaF2\" ), )\n\nfilt = buildfilter(det)\nfrs = mapreduce(ref->filterreference(filt, ref..., withEsc=true), append!, refs)\n# frs is now a FilteredReference[] used to fit the unknowns.\n\nss = subdivide(unks[1], 100)\nres= map(s->fit(s,filt,frs,false), ss)","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"100-element Array{FilterFitResult,1}:\n Sub[III-E K412[0][all],1 of 100]\n Sub[III-E K412[0][all],2 of 100]\n Sub[III-E K412[0][all],3 of 100]\n Sub[III-E K412[0][all],4 of 100]\n Sub[III-E K412[0][all],5 of 100]\n Sub[III-E K412[0][all],6 of 100]\n Sub[III-E K412[0][all],7 of 100]\n Sub[III-E K412[0][all],8 of 100]\n Sub[III-E K412[0][all],9 of 100]\n Sub[III-E K412[0][all],10 of 100]\n ⋮\n Sub[III-E K412[0][all],92 of 100]\n Sub[III-E K412[0][all],93 of 100]\n Sub[III-E K412[0][all],94 of 100]\n Sub[III-E K412[0][all],95 of 100]\n Sub[III-E K412[0][all],96 of 100]\n Sub[III-E K412[0][all],97 of 100]\n Sub[III-E K412[0][all],98 of 100]\n Sub[III-E K412[0][all],99 of 100]\n Sub[III-E K412[0][all],100 of 100]","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Spectra O K-L3 + 1 other ΔO K-L3 + 1 other Fe L3-M5 + 11 others ΔFe L3-M5 + 11 others Mg K-L3 + 1 other ΔMg K-L3 + 1 other Al K-L3 + 1 other ΔAl K-L3 + 1 other Si K-L3 + 2 others ΔSi K-L3 + 2 others Ca K-L3 + 3 others ΔCa K-L3 + 3 others Fe K-L3 + 1 other ΔFe K-L3 + 1 other Fe K-M3 + 3 others ΔFe K-M3 + 3 others\nSub[III-E K412[0][all],1 of 100] 0.6665 0.008154 0.04408 0.004271 0.1492 0.001839 0.06389 0.001577 0.3494 0.002882 0.1914 0.002323 0.0678 0.001601 0.06441 0.006762\nSub[III-E K412[0][all],2 of 100] 0.6541 0.0081 0.04487 0.004363 0.1486 0.001832 0.06526 0.001581 0.3455 0.002888 0.1935 0.002333 0.06683 0.001597 0.07155 0.006911\nSub[III-E K412[0][all],3 of 100] 0.6488 0.008125 0.05133 0.004515 0.1462 0.001831 0.06723 0.001585 0.3562 0.002899 0.1959 0.002334 0.06778 0.001595 0.07517 0.006825\nSub[III-E K412[0][all],4 of 100] 0.6594 0.008116 0.04502 0.004442 0.1474 0.00183 0.06345 0.001572 0.3557 0.002891 0.197 0.002346 0.06809 0.001611 0.06953 0.006817\nSub[III-E K412[0][all],5 of 100] 0.6479 0.008094 0.04323 0.004381 0.1452 0.001821 0.06809 0.001586 0.3483 0.00289 0.1893 0.002314 0.06701 0.001586 0.06107 0.006606\nSub[III-E K412[0][all],6 of 100] 0.6498 0.008111 0.04319 0.00444 0.1484 0.001837 0.06586 0.001586 0.3502 0.002891 0.1938 0.002328 0.06534 0.001581 0.07649 0.006792\nSub[III-E K412[0][all],7 of 100] 0.6549 0.008136 0.03624 0.004373 0.1472 0.001829 0.06615 0.001583 0.3509 0.002891 0.1893 0.002329 0.0677 0.001584 0.07005 0.006828\nSub[III-E K412[0][all],8 of 100] 0.6536 0.008159 0.04032 0.004384 0.1507 0.001834 0.06838 0.0016 0.3532 0.002889 0.1936 0.00232 0.06639 0.001599 0.07307 0.006759\nSub[III-E K412[0][all],9 of 100] 0.6464 0.008155 0.04119 0.004435 0.1495 0.001846 0.06588 0.00158 0.3518 0.002893 0.1924 0.002322 0.06486 0.001583 0.06396 0.006734\nSub[III-E K412[0][all],10 of 100] 0.6455 0.008079 0.04204 0.00442 0.1489 0.00184 0.06711 0.001591 0.3538 0.002898 0.1935 0.002325 0.06526 0.001589 0.07408 0.006764","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"variable mean std hetero min q25 median q75 max\nO K-L3 + 1 other 0.6556 0.007311 0.8989 0.638 0.6506 0.6549 0.6607 0.6797\nFe L3-M5 + 11 others 0.04192 0.003719 0.849 0.03334 0.03936 0.04156 0.04456 0.05133\nMg K-L3 + 1 other 0.1476 0.001765 0.9624 0.1424 0.1462 0.1474 0.1489 0.1527\nAl K-L3 + 1 other 0.06702 0.001577 0.992 0.06345 0.06589 0.06713 0.06805 0.07115\nSi K-L3 + 2 others 0.351 0.002813 0.9728 0.344 0.3488 0.3513 0.3532 0.3564\nCa K-L3 + 3 others 0.1922 0.0022 0.946 0.1877 0.1907 0.1925 0.1938 0.197\nFe K-L3 + 1 other 0.06683 0.001761 1.106 0.06306 0.06566 0.06697 0.06802 0.07132\nFe K-M3 + 3 others 0.06691 0.006145 0.9146 0.05117 0.06305 0.06706 0.07158 0.08126","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Repeat the fit for the 4 measured unknowns.","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"res= map(s->fit(s,filt,frs,false),unks)","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"5-element Array{FilterFitResult,1}:\n III-E K412[0][all]\n III-E K412[1][all]\n III-E K412[2][all]\n III-E K412[3][all]\n III-E K412[4][all]","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Spectra O K-L3 + 1 other ΔO K-L3 + 1 other Fe L3-M5 + 11 others ΔFe L3-M5 + 11 others Mg K-L3 + 1 other ΔMg K-L3 + 1 other Al K-L3 + 1 other ΔAl K-L3 + 1 other Si K-L3 + 2 others ΔSi K-L3 + 2 others Ca K-L3 + 3 others ΔCa K-L3 + 3 others Fe K-L3 + 1 other ΔFe K-L3 + 1 other Fe K-M3 + 3 others ΔFe K-M3 + 3 others\nIII-E K412[0][all] 0.6556 0.0008134 0.04191 0.0004382 0.1476 0.0001834 0.06703 0.000159 0.351 0.0002892 0.1922 0.0002326 0.06683 0.0001593 0.06684 0.0006722\nIII-E K412[1][all] 0.6574 0.0008141 0.04157 0.0004372 0.1475 0.0001835 0.06678 0.000159 0.3502 0.000289 0.1916 0.0002324 0.06708 0.0001595 0.06738 0.0006721\nIII-E K412[2][all] 0.658 0.0008157 0.04192 0.0004381 0.1479 0.0001838 0.06712 0.0001594 0.3515 0.0002898 0.1922 0.0002329 0.06688 0.0001596 0.06704 0.0006737\nIII-E K412[3][all] 0.6624 0.0008188 0.04146 0.0004379 0.1481 0.0001841 0.0672 0.0001596 0.3522 0.0002903 0.1925 0.0002333 0.06682 0.0001598 0.0678 0.0006746\nIII-E K412[4][all] 0.6608 0.0008182 0.04082 0.0004383 0.1482 0.0001841 0.06732 0.0001597 0.3521 0.0002902 0.1922 0.0002333 0.06694 0.0001598 0.06648 0.0006739","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Summary statistics.","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"variable mean std hetero min q25 median q75 max\nO K-L3 + 1 other 0.6588 0.002724 3.338 0.6556 0.6574 0.658 0.6608 0.6624\nFe L3-M5 + 11 others 0.04153 0.0004496 1.027 0.04082 0.04146 0.04157 0.04191 0.04192\nMg K-L3 + 1 other 0.1478 0.0003027 1.647 0.1475 0.1476 0.1479 0.1481 0.1482\nAl K-L3 + 1 other 0.06709 0.0002019 1.267 0.06678 0.06703 0.06712 0.0672 0.06732\nSi K-L3 + 2 others 0.3514 0.0008351 2.883 0.3502 0.351 0.3515 0.3521 0.3522\nCa K-L3 + 3 others 0.1921 0.000318 1.365 0.1916 0.1922 0.1922 0.1922 0.1925\nFe K-L3 + 1 other 0.06691 0.0001063 0.6661 0.06682 0.06683 0.06688 0.06694 0.06708\nFe K-M3 + 3 others 0.06711 0.0005071 0.7531 0.06648 0.06684 0.06704 0.06738 0.0678","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"@btime fit(unks[1], filt, frs, false)","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"2.391 ms (26387 allocations: 12.95 MiB)\nIII-E K412[0][all]","category":"page"},{"location":"errorbars/#AMM-6005a","page":"Lovely Error Bars","title":"AMM-6005a","text":"","category":"section"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Repeat using the ADM glass.  Fe is not present in ADM-6005a but we fit it to see what a null result looks like.","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"path = normpath(joinpath(\"..\",\"test\",\"ADM6005a spectra\"))\nunks = map(i->loadspectrum(joinpath(path,\"ADM-6005a_$i.msa\")),1:15)\nal, caf2, fe, ge, si, sio2, ti, zn = map(f->loadspectrum(joinpath(path,\"$f.msa\")), (\"Al std\", \"CaF2 std\", \"Fe std\", \"Ge std\", \"Si std\", \"SiO2 std\", \"Ti trimmed\",\"Zn std\"))\n\nrefs = (\n  # spectrum, element, composition\n  ( al,   n\"Al\", mat\"Al\" ), #\n  ( caf2, n\"Ca\", mat\"CaF2\" ),   #\n  ( fe,   n\"Fe\", mat\"Fe\" ),    #\n  ( ge,   n\"Ge\", mat\"Ge\" ),    #\n  ( si,   n\"Si\", mat\"Si\" ),  #\n  ( sio2, n\"O\",  mat\"SiO2\" ),  #\n  ( ti,   n\"Ti\", mat\"Ti\" ),\n  ( zn,   n\"Zn\", mat\"Zn\" ),\n)\n\ndet = matching(unks[1], 132.0, 10)\nfilt = buildfilter(det)\nfrs = mapreduce(ref->filterreference(filt, ref..., withEsc=true), append!, refs)\n# frs is now a FilteredReference[] used to fit the unknowns.\nss = subdivide(unks[1], 100)\nres= map(s->fit(s,filt,frs,false), ss)","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"100-element Array{FilterFitResult,1}:\n Sub[ADM-6005a_1,1 of 100]\n Sub[ADM-6005a_1,2 of 100]\n Sub[ADM-6005a_1,3 of 100]\n Sub[ADM-6005a_1,4 of 100]\n Sub[ADM-6005a_1,5 of 100]\n Sub[ADM-6005a_1,6 of 100]\n Sub[ADM-6005a_1,7 of 100]\n Sub[ADM-6005a_1,8 of 100]\n Sub[ADM-6005a_1,9 of 100]\n Sub[ADM-6005a_1,10 of 100]\n ⋮\n Sub[ADM-6005a_1,92 of 100]\n Sub[ADM-6005a_1,93 of 100]\n Sub[ADM-6005a_1,94 of 100]\n Sub[ADM-6005a_1,95 of 100]\n Sub[ADM-6005a_1,96 of 100]\n Sub[ADM-6005a_1,97 of 100]\n Sub[ADM-6005a_1,98 of 100]\n Sub[ADM-6005a_1,99 of 100]\n Sub[ADM-6005a_1,100 of 100]","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Spectra Ti L3-M1 + 6 others ΔTi L3-M1 + 6 others O K-L3 + 1 other ΔO K-L3 + 1 other Fe L3-M5 + 11 others ΔFe L3-M5 + 11 others Zn L3-M5 + 11 others ΔZn L3-M5 + 11 others Ge L3-M5 + 11 others ΔGe L3-M5 + 11 others Al K-L3 + 1 other ΔAl K-L3 + 1 other Si K-L3 + 2 others ΔSi K-L3 + 2 others Ca K-L3 + 3 others ΔCa K-L3 + 3 others Ti K-L3 + 3 others ΔTi K-L3 + 3 others Fe K-L3 + 1 other ΔFe K-L3 + 1 other Fe K-M3 + 3 others ΔFe K-M3 + 3 others Zn K-L3 + 1 other ΔZn K-L3 + 1 other Zn K-M3 + 3 others ΔZn K-M3 + 3 others Ge K-L3 + 1 other ΔGe K-L3 + 1 other Ge K-M3 + 3 others ΔGe K-M3 + 3 others\nSub[ADM-6005a_1,1 of 100] 0.005975 0.01808 0.4906 0.006788 -0.006773 0.002752 0.06988 0.00149 0.1826 0.001779 0.02863 0.0005066 0.02306 0.0005212 0.1203 0.001669 0.06308 0.001112 0.001268 0.0007228 0.0005828 0.005041 0.1048 0.002784 0.09385 0.01556 0.2711 0.005318 0.288 0.01895\nSub[ADM-6005a_1,2 of 100] 0.0447 0.0185 0.483 0.006646 0.00266 0.002791 0.06702 0.001465 0.1803 0.001768 0.02748 0.0004948 0.02088 0.000511 0.1217 0.001697 0.06583 0.001122 0.0004491 0.000738 -0.002068 0.005046 0.1136 0.002822 0.1188 0.01554 0.2589 0.005236 0.2621 0.01877\nSub[ADM-6005a_1,3 of 100] 0.04675 0.01823 0.4985 0.006788 0.001178 0.002877 0.06912 0.001469 0.182 0.001769 0.02824 0.0005003 0.02123 0.0005157 0.1226 0.001688 0.06678 0.001114 0.0005211 0.0007279 0.002137 0.005194 0.1093 0.002789 0.1033 0.01558 0.262 0.005226 0.2724 0.01985\nSub[ADM-6005a_1,4 of 100] -0.02165 0.01813 0.4863 0.006758 0.0011 0.002739 0.06745 0.001474 0.1789 0.001773 0.02907 0.0005044 0.02139 0.0005148 0.1215 0.00169 0.06486 0.001107 -4.012e-05 0.0007132 0.01092 0.005072 0.1113 0.002834 0.1404 0.01564 0.2586 0.005255 0.2843 0.01965\nSub[ADM-6005a_1,5 of 100] -0.007084 0.01786 0.4662 0.006695 0.0008476 0.002845 0.06864 0.001482 0.1754 0.00176 0.02831 0.0005044 0.02235 0.0005174 0.1234 0.001691 0.06445 0.001112 0.0004547 0.0007056 0.0005255 0.005134 0.1136 0.002855 0.1195 0.01573 0.2637 0.005283 0.3114 0.01936\nSub[ADM-6005a_1,6 of 100] 0.01799 0.01804 0.4879 0.00678 -0.002964 0.002788 0.06944 0.001474 0.1766 0.001753 0.02825 0.0005015 0.02133 0.0005061 0.1199 0.001682 0.06555 0.001106 -3.125e-05 0.0007009 0.005611 0.00523 0.1123 0.002833 0.1167 0.01528 0.2641 0.00524 0.2272 0.01903\nSub[ADM-6005a_1,7 of 100] 0.003757 0.01807 0.4887 0.006732 0.004456 0.002822 0.06897 0.001477 0.1804 0.001764 0.02749 0.0005021 0.02176 0.000512 0.1208 0.00168 0.06424 0.001109 -0.0002469 0.0006968 -0.001908 0.00506 0.1179 0.002878 0.1253 0.01574 0.2585 0.005286 0.2632 0.01905\nSub[ADM-6005a_1,8 of 100] -0.02254 0.01814 0.4851 0.00678 0.002967 0.002857 0.06817 0.001478 0.1808 0.001781 0.02796 0.0005034 0.02148 0.0005135 0.1216 0.001689 0.06419 0.001114 0.002135 0.0007114 0.008867 0.005157 0.1076 0.002759 0.1168 0.01549 0.2688 0.00525 0.2653 0.01906\nSub[ADM-6005a_1,9 of 100] 0.0416 0.01837 0.491 0.006714 -0.001483 0.002763 0.06833 0.001488 0.1778 0.001761 0.02714 0.0004956 0.02133 0.0005169 0.1244 0.001693 0.06193 0.001108 -0.0001439 0.0007174 0.0007677 0.005003 0.1074 0.002814 0.1312 0.01614 0.2478 0.005204 0.2894 0.01961\nSub[ADM-6005a_1,10 of 100] 0.003403 0.01812 0.4845 0.006743 -0.0005163 0.002775 0.0666 0.001468 0.1785 0.001762 0.0292 0.0005055 0.02172 0.0005165 0.1217 0.001677 0.06564 0.001104 -0.0001199 0.0006903 0.007772 0.005145 0.1137 0.002829 0.1144 0.0158 0.2611 0.005283 0.2742 0.01887","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Summary statistics.","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"variable mean std hetero min q25 median q75 max\nTi L3-M1 + 6 others 0.01981 0.02039 1.13 -0.02602 0.004001 0.02124 0.0355 0.06631\nO K-L3 + 1 other 0.4876 0.00999 1.484 0.4608 0.4814 0.4876 0.4932 0.5098\nFe L3-M5 + 11 others 0.0001052 0.002932 1.048 -0.009091 -0.001847 9.817e-05 0.002109 0.007574\nZn L3-M5 + 11 others 0.06815 0.001917 1.3 0.06437 0.06696 0.06817 0.06948 0.07536\nGe L3-M5 + 11 others 0.1793 0.002274 1.287 0.1721 0.1778 0.1791 0.1808 0.1844\nAl K-L3 + 1 other 0.02804 0.0006547 1.309 0.02665 0.02752 0.02805 0.02844 0.02981\nSi K-L3 + 2 others 0.02139 0.0006709 1.308 0.01955 0.02099 0.02139 0.02181 0.02306\nCa K-L3 + 3 others 0.1214 0.002532 1.501 0.1142 0.12 0.1217 0.1233 0.1252\nTi K-L3 + 3 others 0.06436 0.001664 1.496 0.06011 0.06306 0.06435 0.06557 0.06808\nFe K-L3 + 1 other 0.0002125 0.0008503 1.196 -0.001924 -0.0003976 0.0003053 0.0007514 0.002135\nFe K-M3 + 3 others 0.001333 0.005412 1.064 -0.008699 -0.002507 0.001814 0.005032 0.01811\nZn K-L3 + 1 other 0.1115 0.004129 1.461 0.1029 0.1085 0.1118 0.1142 0.1219\nZn K-M3 + 3 others 0.1244 0.01792 1.141 0.07788 0.1146 0.1219 0.1376 0.1639\nGe K-L3 + 1 other 0.2634 0.006813 1.297 0.2478 0.2589 0.2626 0.268 0.2865\nGe K-M3 + 3 others 0.2713 0.02396 1.255 0.2103 0.2551 0.2735 0.2886 0.3272","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Repeat for the 15 measured spectra.","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"res= map(s->fit(s,filt,frs,false),unks)","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"15-element Array{FilterFitResult,1}:\n ADM-6005a_1\n ADM-6005a_2\n ADM-6005a_3\n ADM-6005a_4\n ADM-6005a_5\n ADM-6005a_6\n ADM-6005a_7\n ADM-6005a_8\n ADM-6005a_9\n ADM-6005a_10\n ADM-6005a_11\n ADM-6005a_12\n ADM-6005a_13\n ADM-6005a_14\n ADM-6005a_15","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Spectra Ti L3-M1 + 6 others ΔTi L3-M1 + 6 others O K-L3 + 1 other ΔO K-L3 + 1 other Fe L3-M5 + 11 others ΔFe L3-M5 + 11 others Zn L3-M5 + 11 others ΔZn L3-M5 + 11 others Ge L3-M5 + 11 others ΔGe L3-M5 + 11 others Al K-L3 + 1 other ΔAl K-L3 + 1 other Si K-L3 + 2 others ΔSi K-L3 + 2 others Ca K-L3 + 3 others ΔCa K-L3 + 3 others Ti K-L3 + 3 others ΔTi K-L3 + 3 others Fe K-L3 + 1 other ΔFe K-L3 + 1 other Fe K-M3 + 3 others ΔFe K-M3 + 3 others Zn K-L3 + 1 other ΔZn K-L3 + 1 other Zn K-M3 + 3 others ΔZn K-M3 + 3 others Ge K-L3 + 1 other ΔGe K-L3 + 1 other Ge K-M3 + 3 others ΔGe K-M3 + 3 others\nADM-6005a_1 0.01961 0.001806 0.4876 0.0006731 0.0001192 0.0002801 0.06814 0.0001475 0.1793 0.0001767 0.02804 5.004e-05 0.02138 5.13e-05 0.1214 0.0001687 0.06436 0.0001113 0.0002086 7.113e-05 0.001279 0.0005092 0.1115 0.0002826 0.1242 0.00157 0.2634 0.0005252 0.271 0.001901\nADM-6005a_2 0.0205 0.001807 0.4863 0.0006731 -0.0002351 0.0002776 0.06796 0.0001476 0.1797 0.0001767 0.02797 5.004e-05 0.0214 5.125e-05 0.1214 0.0001687 0.06388 0.0001113 0.000327 7.083e-05 0.001392 0.0005099 0.1114 0.0002829 0.1242 0.001569 0.264 0.0005255 0.2779 0.001906\nADM-6005a_3 0.02104 0.001806 0.4894 0.0006739 0.0002456 0.0002783 0.06801 0.0001478 0.1795 0.0001767 0.02809 5.005e-05 0.02134 5.124e-05 0.1216 0.0001688 0.06398 0.0001113 0.0002939 7.121e-05 0.0006172 0.0005087 0.1115 0.0002824 0.1171 0.001568 0.2622 0.0005249 0.2805 0.001906\nADM-6005a_4 0.01927 0.001808 0.488 0.000674 -0.0002629 0.0002786 0.06843 0.000148 0.1795 0.0001768 0.02805 5.009e-05 0.02145 5.132e-05 0.1211 0.0001687 0.064 0.0001112 0.0003321 7.132e-05 0.001288 0.0005101 0.1116 0.000283 0.1219 0.001568 0.2635 0.0005251 0.2763 0.001907\nADM-6005a_5 0.01981 0.001807 0.488 0.0006736 -0.000295 0.0002782 0.0679 0.0001476 0.1793 0.0001767 0.0282 5.009e-05 0.02128 5.126e-05 0.1215 0.0001689 0.06406 0.0001111 0.0002927 7.113e-05 0.001476 0.0005089 0.1115 0.0002826 0.1223 0.001563 0.2624 0.000525 0.2739 0.001902\nADM-6005a_6 0.02261 0.001805 0.4892 0.0006732 -1.009e-05 0.0002778 0.06812 0.0001476 0.1792 0.0001767 0.02819 5.012e-05 0.02135 5.131e-05 0.1209 0.0001686 0.06397 0.0001113 0.0002292 7.081e-05 0.001215 0.0005083 0.111 0.0002825 0.1236 0.001568 0.2619 0.000525 0.2785 0.001901\nADM-6005a_7 0.02162 0.001812 0.4897 0.0006749 -0.0002576 0.0002782 0.06787 0.0001476 0.1795 0.0001768 0.02799 5.006e-05 0.02141 5.127e-05 0.1215 0.0001688 0.06419 0.0001112 0.0002994 7.099e-05 -0.001193 0.0005076 0.1109 0.0002832 0.123 0.001573 0.2635 0.0005264 0.2731 0.001902\nADM-6005a_8 0.01965 0.001808 0.4884 0.0006735 8.942e-05 0.0002781 0.06805 0.0001477 0.1796 0.0001768 0.02813 5.013e-05 0.02149 5.133e-05 0.1215 0.0001687 0.06407 0.0001112 0.0002932 7.099e-05 0.0003163 0.0005112 0.1112 0.0002823 0.1239 0.001571 0.2639 0.0005259 0.2782 0.001909\nADM-6005a_9 0.02078 0.00181 0.4885 0.0006737 -0.0001433 0.0002785 0.06836 0.0001479 0.1791 0.0001769 0.02815 5.01e-05 0.02148 5.13e-05 0.1214 0.0001687 0.06404 0.0001112 0.000288 7.115e-05 0.001433 0.0005106 0.1108 0.0002824 0.1197 0.001571 0.2614 0.0005256 0.2768 0.001902\nADM-6005a_10 0.02461 0.001806 0.4877 0.0006734 0.0001256 0.000279 0.06788 0.0001477 0.1797 0.0001768 0.02817 5.009e-05 0.02142 5.13e-05 0.1211 0.0001687 0.06389 0.0001112 0.0001888 7.111e-05 0.001782 0.0005101 0.1116 0.0002828 0.126 0.001572 0.2627 0.0005253 0.2751 0.001909\nADM-6005a_11 0.02009 0.001805 0.4883 0.000674 0.0002259 0.0002791 0.0678 0.0001476 0.1797 0.0001768 0.02808 5.008e-05 0.02147 5.133e-05 0.1214 0.0001688 0.06394 0.0001111 0.000495 7.096e-05 0.0008653 0.0005081 0.1114 0.0002823 0.1231 0.001566 0.2633 0.0005256 0.2719 0.001896\nADM-6005a_12 0.02039 0.001812 0.4899 0.000675 -1.502e-05 0.0002787 0.0679 0.0001477 0.1796 0.0001769 0.02803 5.009e-05 0.02144 5.133e-05 0.1213 0.0001688 0.06378 0.0001112 0.0003209 7.086e-05 0.001044 0.0005096 0.1112 0.000283 0.1182 0.001568 0.2624 0.0005259 0.2734 0.001901\nADM-6005a_13 0.0167 0.001813 0.4893 0.0006747 0.0002034 0.0002777 0.06837 0.0001478 0.1794 0.0001768 0.02811 5.003e-05 0.02136 5.132e-05 0.1216 0.0001687 0.06395 0.0001112 0.0003085 7.107e-05 -0.0009608 0.0005075 0.1111 0.0002828 0.126 0.001568 0.2632 0.0005253 0.2795 0.001911\nADM-6005a_14 0.01853 0.00181 0.4895 0.0006743 -0.000242 0.0002776 0.06805 0.0001478 0.1798 0.0001768 0.02798 5.003e-05 0.02147 5.128e-05 0.1215 0.0001689 0.0639 0.0001113 0.0004101 7.106e-05 0.0008799 0.0005094 0.111 0.0002824 0.1229 0.001569 0.2628 0.0005251 0.2764 0.0019\nADM-6005a_15 0.01902 0.001809 0.4903 0.0006741 -6.922e-05 0.000277 0.06803 0.0001477 0.1799 0.000177 0.02817 5.013e-05 0.02137 5.13e-05 0.1215 0.0001688 0.06408 0.0001112 0.0002782 7.094e-05 0.001497 0.0005087 0.1115 0.0002825 0.1225 0.001569 0.2632 0.0005255 0.2724 0.001903","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"Summary statistics.","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"variable mean std hetero min q25 median q75 max\nTi L3-M1 + 6 others 0.02028 0.001822 1.008 0.0167 0.01944 0.02009 0.02091 0.02461\nO K-L3 + 1 other 0.4887 0.00107 1.588 0.4863 0.488 0.4885 0.4894 0.4903\nFe L3-M5 + 11 others -3.473e-05 0.0001954 0.7021 -0.000295 -0.0002385 -1.502e-05 0.0001224 0.0002456\nZn L3-M5 + 11 others 0.06806 0.0001952 1.321 0.0678 0.0679 0.06803 0.06813 0.06843\nGe L3-M5 + 11 others 0.1795 0.0002331 1.318 0.1791 0.1793 0.1795 0.1797 0.1799\nAl K-L3 + 1 other 0.02809 7.811e-05 1.56 0.02797 0.02803 0.02809 0.02816 0.0282\nSi K-L3 + 2 others 0.02141 6.055e-05 1.18 0.02128 0.02137 0.02141 0.02146 0.02149\nCa K-L3 + 3 others 0.1214 0.000212 1.256 0.1209 0.1213 0.1214 0.1215 0.1216\nTi K-L3 + 3 others 0.06401 0.0001387 1.247 0.06378 0.06392 0.06398 0.06406 0.06436\nFe K-L3 + 1 other 0.0003044 7.494e-05 1.055 0.0001888 0.0002831 0.0002939 0.0003239 0.000495\nFe K-M3 + 3 others 0.0008621 0.0008722 1.713 -0.001193 0.0007412 0.001215 0.001413 0.001782\nZn K-L3 + 1 other 0.1113 0.0002754 0.9745 0.1108 0.1111 0.1114 0.1115 0.1116\nZn K-M3 + 3 others 0.1226 0.00254 1.619 0.1171 0.1221 0.123 0.124 0.126\nGe K-L3 + 1 other 0.2629 0.0007433 1.415 0.2614 0.2624 0.2632 0.2634 0.264\nGe K-M3 + 3 others 0.2756 0.00295 1.55 0.271 0.2732 0.2763 0.278 0.2805","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"@btime fit(unks[1], filt, frs, false)","category":"page"},{"location":"errorbars/","page":"Lovely Error Bars","title":"Lovely Error Bars","text":"5.326 ms (30858 allocations: 18.98 MiB)\nADM-6005a_1","category":"page"},{"location":"K412quick/#Quick-Quantifying-K412-using-NeXLSpectrum-VectorQuant","page":"Fitting K412 (quick fit)","title":"Quick Quantifying K412 using NeXLSpectrum VectorQuant","text":"","category":"section"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Fred Schamber taught me this trick for quantifying spectrum extremely quickly.  If you are willing to overlook the fact that","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Use the NeXLSpectrum to load, plot, fit and report the quantification of a set of K412 spectra.","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Loading NeXLSpectrum also automatically makes NeXLCore and NeXLUncertainties available.","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Loading the Gadfly library adds plotting support to NeXLSpectrum.","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"using NeXLSpectrum              # Provides spectrum reading and fitting tools\nusing NeXLMatrixCorrection      # Provides `quant` to convert k-ratios to mass fraction.\nusing Gadfly                    # Plotting\nusing DataFrames, Latexify      # Tables","category":"page"},{"location":"K412quick/#Read-in-the-Spectra","page":"Fitting K412 (quick fit)","title":"Read in the Spectra","text":"","category":"section"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"path = \"K412 spectra\"\n# Load a single spectrum\nfe = loadspectrum(joinpath(\"$(path)\", \"Fe std.msa\"))\n# Create a detector model to match it\ndet = matching(fe, 132.0, 10)\n# Now load all the spectra using this detector\nunks = (i->loadspectrum(joinpath(\"$(path)\", \"III-E K412[$i][4].msa\"),det)).(0:4)\nal2o3 = loadspectrum(joinpath(\"$(path)\", \"Al2O3 std.msa\"),det)\ncaf2 = loadspectrum(joinpath(\"$(path)\", \"CaF2 std.msa\"),det)\nfe = loadspectrum(joinpath(\"$(path)\", \"Fe std.msa\"),det)\nmgo = loadspectrum(joinpath(\"$(path)\", \"MgO std.msa\"),det)\nsio2 = loadspectrum(joinpath(\"$(path)\", \"SiO2 std.msa\"),det)","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"**                                                                   \n      3.235244e6\n      **                                                                   \n     \n      **                                                                   \n     \n      **                                                                   \n     \n      **                                                                   \n     \n      **                                                                   \n     \n      **                                                                   \n     \n      **                                                                   \n     \n  *   **                                                                   \n     \n **   **                                                                   \n     \n **   **                                                                   \n     \n***************************************************************************\n***** 20.0 keV\nSiO2 std[20.0 keV, SiO2, 4.66e7 counts]","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Name BeamEnergy ProbeCurrent LiveTime RealTime Coating Integral Material\nIII-E K412[0][all] 2e+04 1.114 235.5 286.3 nothing 8.079e+06 K412\nIII-E K412[1][all] 2e+04 1.114 235.4 286.2 nothing 8.077e+06 K412\nIII-E K412[2][all] 2e+04 1.112 235.5 286.3 nothing 8.084e+06 K412\nIII-E K412[3][all] 2e+04 1.11 235.4 286.3 nothing 8.087e+06 K412\nIII-E K412[4][all] 2e+04 1.11 235.4 286.2 nothing 8.081e+06 K412\nAl2O3 std 2e+04 1.11 1172 1491 10.0 nm of Pure Carbon 4.974e+07 Al2O3\nCaF2 std 2e+04 1.11 1176 1456 10.0 nm of Pure Carbon 4.406e+07 CaF2\nFe std 2e+04 1.11 1171 1529 nothing 5.445e+07 Fe\nMgO std 2e+04 1.106 1176 1496 10.0 nm of Pure Carbon 4.985e+07 MgO\nSiO2 std 2e+04 1.11 1173 1470 10.0 nm of Pure Carbon 4.665e+07 SiO2","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Notice that the spectra all have 1) live-time (:LiveTime); 2) probe-current (:ProbeCurrent); 3) take-off angle (:TakeOffAngle); 4) beam energy (:BeamEnergy); and detector (:Detector) properties defined.  These properties are necessary for extracting the k-ratios and estimating the composition.","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"sio2[:LiveTime], sio2[:ProbeCurrent], sio2[:TakeOffAngle], sio2[:BeamEnergy], sio2[:Detector]","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"(1173.1648, 1.10989, 0.6108652381980153, 20000.0, BasicEDS(4096, E[ch] = 1.\n63032 + 9.99856⋅ch, 132.0 eV @ Mn K-L3, 10, Dict{Shell,Element}(Shell[L] =>\n Element(Scandium),Shell[K] => Element(Beryllium),Shell[N] => Element(Pluto\nnium),Shell[M] => Element(Barium))))","category":"page"},{"location":"K412quick/#The-Unknowns","page":"Fitting K412 (quick fit)","title":"The Unknowns","text":"","category":"section"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"display(plot(unks..., klms=[n\"O\",n\"Mg\",n\"Al\",n\"Si\",n\"Ca\",n\"Fe\"], xmax=8.0e3))","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"(Image: )","category":"page"},{"location":"K412quick/#The-Reference-Spectra","page":"Fitting K412 (quick fit)","title":"The Reference Spectra","text":"","category":"section"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Build a convenient structure so it is easy to appreciate the necessary information and to splat it into filteredReference.","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"refs = (\n  # spectrum, element, composition\n  ( al2o3, n\"Al\", mat\"Al2O3\" ), #\n  ( mgo,   n\"Mg\", mat\"MgO\" ),   #\n  ( fe,    n\"Fe\", mat\"Fe\" ),    #\n  ( sio2,  n\"Si\", mat\"SiO2\" ),  #\n  ( sio2,  n\"O\",  mat\"SiO2\" ),  #\n  ( caf2,  n\"Ca\", mat\"CaF2\" ), )\ndisplay(plot(al2o3, caf2, fe, mgo, sio2, klms=collect( ref[2] for ref in refs), xmax=8.0e3))","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"(Image: )","category":"page"},{"location":"K412quick/#Filter-the-Reference-Spectra-and-Compute-the-VectorQuant-Structure","page":"Fitting K412 (quick fit)","title":"Filter the Reference Spectra and Compute the VectorQuant Structure","text":"","category":"section"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"# Build a top-hat filter\nfilt = buildfilter(det)\n# Filter all the reference spectra\nfrs = mapreduce(ref->filterreference(filt, ref..., withEsc=false), append!, refs)\n# Build the VectorQuant structure from the fitered references and the filter\nvq = VectorQuant(frs, filt)\nplot(vq,1:800)","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"(Image: )","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Let's take a look at a residual spectrum by plotting one of the FilterFitResult objects. Perform the fit and look at the residual","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"res = map(unk->fit(vq, unk),unks)\nplot(res[1])","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"(Image: )","category":"page"},{"location":"K412quick/#Compare-this-with-the-weighted-fit","page":"Fitting K412 (quick fit)","title":"Compare this with the weighted fit","text":"","category":"section"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"resfull = map(unk->fit(unk,filt,frs,false), unks)\nplot(resfull[1])","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"(Image: )","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Now the full data set...","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Spectra O K-L3 + 1 other ΔO K-L3 + 1 other Fe L3-M5 + 11 others ΔFe L3-M5 + 11 others Mg K-L3 + 1 other ΔMg K-L3 + 1 other Al K-L3 + 1 other ΔAl K-L3 + 1 other Si K-L3 + 2 others ΔSi K-L3 + 2 others Ca K-L3 + 3 others ΔCa K-L3 + 3 others Fe K-L3 + 1 other ΔFe K-L3 + 1 other Fe K-M3 + 3 others ΔFe K-M3 + 3 others\nIII-E K412[0][all] 0.6467 0.0007399 0.04256 0.000287 0.1473 0.0001671 0.06696 0.0001265 0.3509 0.000261 0.1922 0.0002178 0.06683 0.0001458 0.06666 0.000567\nIII-E K412[1][all] 0.6488 0.0007407 0.04224 0.000286 0.1472 0.0001671 0.06676 0.0001265 0.35 0.0002608 0.1916 0.0002176 0.06701 0.000146 0.06714 0.0005672\nIII-E K412[2][all] 0.6492 0.0007419 0.04252 0.0002874 0.1476 0.0001675 0.06708 0.0001269 0.3511 0.0002616 0.1922 0.000218 0.06683 0.0001461 0.06683 0.0005687\nIII-E K412[3][all] 0.6537 0.000745 0.042 0.0002873 0.1479 0.0001678 0.06714 0.000127 0.3519 0.0002619 0.1926 0.0002184 0.06684 0.0001463 0.06759 0.0005694\nIII-E K412[4][all] 0.6522 0.0007445 0.04159 0.0002873 0.1479 0.0001677 0.06728 0.0001271 0.3519 0.0002619 0.192 0.0002184 0.06687 0.0001462 0.06634 0.0005689","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Spectra O K-L3 + 1 other ΔO K-L3 + 1 other Fe L3-M5 + 11 others ΔFe L3-M5 + 11 others Mg K-L3 + 1 other ΔMg K-L3 + 1 other Al K-L3 + 1 other ΔAl K-L3 + 1 other Si K-L3 + 2 others ΔSi K-L3 + 2 others Ca K-L3 + 3 others ΔCa K-L3 + 3 others Fe K-L3 + 1 other ΔFe K-L3 + 1 other Fe K-M3 + 3 others ΔFe K-M3 + 3 others\nIII-E K412[0][all] 0.6556 0.0008134 0.04191 0.0004382 0.1476 0.0001834 0.06703 0.000159 0.351 0.000289 0.1922 0.0002326 0.06683 0.0001593 0.06684 0.0006722\nIII-E K412[1][all] 0.6574 0.0008141 0.04157 0.0004372 0.1475 0.0001835 0.06679 0.000159 0.3502 0.0002888 0.1916 0.0002324 0.06708 0.0001595 0.06738 0.0006721\nIII-E K412[2][all] 0.658 0.0008157 0.04192 0.0004381 0.1479 0.0001838 0.06713 0.0001594 0.3514 0.0002896 0.1922 0.0002329 0.06688 0.0001596 0.06704 0.0006737\nIII-E K412[3][all] 0.6624 0.0008188 0.04146 0.0004379 0.1481 0.0001841 0.0672 0.0001596 0.3522 0.00029 0.1925 0.0002333 0.06682 0.0001598 0.0678 0.0006746\nIII-E K412[4][all] 0.6608 0.0008182 0.04082 0.0004383 0.1482 0.0001841 0.06732 0.0001597 0.3521 0.00029 0.1922 0.0002333 0.06694 0.0001598 0.06648 0.0006739","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"Compare the timings (full then fast)","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"using BenchmarkTools\n@btime map(unk->fit(unk,filt,frs,false), unks)","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"19.699 ms (127887 allocations: 64.10 MiB)","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"@btime map(unk->fit(vq, unk),unks)","category":"page"},{"location":"K412quick/","page":"Fitting K412 (quick fit)","title":"Fitting K412 (quick fit)","text":"2.099 ms (21579 allocations: 751.34 KiB)\n5-element Array{FilterFitResult,1}:\n III-E K412[0][all]\n III-E K412[1][all]\n III-E K412[2][all]\n III-E K412[3][all]\n III-E K412[4][all]","category":"page"},{"location":"XRFspectra/#Fitting-a-Stainless-Steel-XRF-Spectrum","page":"Fitting XRF Spectra","title":"Fitting a Stainless Steel XRF Spectrum","text":"","category":"section"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"Load the necessary libraries.","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"using NeXLSpectrum\nusing Gadfly           # For plotting. I've added spectrum support.\nusing DataFrames, Latexify       # For tables.","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"Load the spectra from EMSA files.","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"path = \"XRF Stainless\"\n# We use map to apply `readEMSA` to each of the files\nspecs = steel, fe, ni, cr, ti, si, s, sn = map(fn->loadspectrum(joinpath(path, fn)), (\n  \"Steel_50kv_50_ma_Rh_vac_D1.msa\",\n  \"Fe_50kv_50_ma_Rh_vac_D1.msa\",\n  \"Ni_50kv_50_ma_Rh_vac_D1.msa\",\n  \"Cr_50kv_50_ma_Rh_vac_D1.msa\",\n  \"Ti_50kv_50_ma_Rh_vac_D1.msa\",\n  \"Si_50kv_50_ma_Rh_vac_D1.msa\",\n  \"S_50kv_50_ma_Rh_vac_D1.msa\",\n  \"Sn_50kv_50_ma_Rh_vac_D1.msa\",));","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, \n0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0\n, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0\n, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, \n0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, \n0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0\n, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, \n0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0\n, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0\n, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, \n0.0, 0.0, 0.0])","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"Name BeamEnergy ProbeCurrent LiveTime RealTime Coating Integral Material\nSteel50kv50maRhvacD1 missing missing 120 131.9 nothing 6.536e+06 missing\nFe50kv50maRhvacD1 missing missing 120 134.8 nothing 7.644e+06 missing\nNi50kv50maRhvacD1 missing missing 120 137.7 nothing 8.487e+06 missing\nCr50kv50maRhvacD1 missing missing 120 131.7 nothing 6.578e+06 missing\nTi50kv50maRhvacD1 missing missing 120 128 nothing 5.087e+06 missing\nSi50kv50maRhvacD1 missing missing 120 121 nothing 1.862e+06 missing\nS50kv50maRhvacD1 missing missing 120 122.2 nothing 2.455e+06 missing\nSn50kv50maRhvacD1 missing missing 120 121.5 nothing 2.099e+06 missing","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"plot(specs..., xmax=25.0e3,klms=[n\"Fe\",n\"Cr\",n\"Ni\",n\"Ti\", n\"Si\",n\"S\", n\"Mo\", n\"Rh\"])","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"(Image: )","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"display(plot(steel,xmax=25.0e3, yscale=1.1,klms=[n\"Fe\",n\"Cr\",n\"Ni\",n\"Ti\", n\"Si\",n\"S\", n\"Mo\", n\"Rh\"]))","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"(Image: )","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"display(plot(steel,xmax=25.0e3, yscale=0.01,klms=[n\"Fe\",n\"Cr\",n\"Ni\",n\"Ti\", n\"Si\",n\"S\", n\"Mo\", n\"Rh\"]))","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"(Image: )","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"Build the filtered references which will be fit to the steel unknown.","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"# This Dict defines which is the lowest z element which can be measured for the K, L, M, N shells\nfirstelm = Dict(KShell=>n\"Na\", LShell=>n\"Zn\", MShell=>n\"Sm\", NShell=>n\"Og\")\n# Build a detector to match the steel spectrum\ndet = matching(steel, steel[:FWHMMnKa], 120, firstelm)\n# Build a 'VariableWidthFilter' top-hat filter to suit the detector\nfilt = buildfilter(VariableWidthFilter,det)\nrefdata = (\n  # ( spectrum, element, material ), # The ordering of `refdata` allows us to splat it into `filterreference(...)`\n  ( fe, n\"Fe\", mat\"Fe\" ),\n  ( cr, n\"Cr\", mat\"Cr\" ),\n  ( ni, n\"Ni\", mat\"Ni\" ),\n  ( ti, n\"Ti\", mat\"Ti\" ),\n  ( si, n\"Si\", mat\"Si\" ),\n  ( s, n\"S\", mat\"S\" ),\n  ( sn, n\"Sn\", mat\"Sn\" ),\n)\n# Some necessary properties are missing from the spectra so provide them.\nxtra = Dict{Symbol,Any}(:BeamEnergy=>40.0e3, :ProbeCurrent=>1.0, :Detector=>det)\nrefs = FilteredReference[]\nfor rd in refdata\n  append!(refs, filterreference(filt, rd..., props=xtra))\nend\n# Merge the missing properties into the unknown too.\nmerge!(steel, xtra)\nres = fit(steel, filt, refs, false)\n# Tabulate the results","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"Spectrum Feature Reference Start Stop K dK Peak Back PtoB\nSteel50kv50maRhvacD1 Cr K-L3 + 5 others Cr50kv50maRhvacD1 609 717 0.2356 0.0002151 1.281e+06 5.179e+04 2672\nSteel50kv50maRhvacD1 Fe K-L3 + 1 other Fe50kv50maRhvacD1 706 767 0.557 0.0003218 3.05e+06 1.555e+04 1.196e+04\nSteel50kv50maRhvacD1 Fe K-M3 + 3 others Fe50kv50maRhvacD1 774 830 0.5712 0.001038 4.858e+05 3.219e+04 845.1\nSteel50kv50maRhvacD1 Ni K-L3 + 1 other Ni50kv50maRhvacD1 811 876 0.0488 0.0001035 3.495e+05 5.005e+04 453.9\nSteel50kv50maRhvacD1 Ni K-M3 + 3 others Ni50kv50maRhvacD1 893 953 0.04948 0.0003118 6.067e+04 1.667e+04 218.4\nSteel50kv50maRhvacD1 S K-L3 + 3 others S50kv50maRhvacD1 305 362 0.005651 0.000116 1.243e+04 6633 106.8\nSteel50kv50maRhvacD1 Si K-L3 + 2 others Si50kv50maRhvacD1 249 296 0.002306 0.0001139 2510 1536 76.78\nSteel50kv50maRhvacD1 Sn K-L3 + 1 other Sn50kv50maRhvacD1 2549 2677 -1.2e-05 0.001518 205 205.2 127.8\nSteel50kv50maRhvacD1 Sn K-M3 + 7 others Sn50kv50maRhvacD1 2891 3055 -0.001964 0.006831 113 118.9 155.8\nSteel50kv50maRhvacD1 Sn L3-M5 + 23 others Sn50kv50maRhvacD1 380 555 -2.329e-05 0.0001948 3.086e+04 3.088e+04 174.9\nSteel50kv50maRhvacD1 Ti K-L3 + 3 others Ti50kv50maRhvacD1 520 614 0.004754 4.536e-05 3.347e+04 1.584e+04 198.6","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"Plot the residual spectrum.  Note that Mo and Rh were not fit and so there remain significant peaks between 16 and 20 keV.","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"plot(res)","category":"page"},{"location":"XRFspectra/","page":"Fitting XRF Spectra","title":"Fitting XRF Spectra","text":"(Image: )","category":"page"},{"location":"methods/#![](NeXL_sm.png)Spectrum","page":"Methods","title":"(Image: )Spectrum","text":"","category":"section"},{"location":"methods/#Microanalytical-X-ray-Spectrum-Analysis","page":"Methods","title":"Microanalytical X-ray Spectrum Analysis","text":"","category":"section"},{"location":"methods/#Fitting-Filter","page":"Methods","title":"Fitting Filter","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"NeXLSpectrum.TopHatFilter\r\nNeXLSpectrum.ConstantWidthFilter\r\nNeXLSpectrum.GaussianFilter\r\nNeXLSpectrum.VariableWidthFilter\r\nNeXLSpectrum.tophatfilter\r\nNeXLSpectrum.buildfilter","category":"page"},{"location":"methods/#NeXLSpectrum.TopHatFilter","page":"Methods","title":"NeXLSpectrum.TopHatFilter","text":"The TopHatFilter struct represents a zero-sum symmetric second-derivative-like filter that when applied to spectral data has the property of suppressing constant and slowly varying signals (like the continuum) while retaining a linear signal for faster changing signals like the characteristic peaks.\n\nSee\n\nF. H. Schamber Proc Symposium of \"X-ray Fluorscence Analysis on Environmental Samples\" Chapel Hill 1976 T Dzubay Ed.\nP. Statham Anal Chem 49 no 14 Dec 1977\n\nThe TopHatFilter struct optimizes the memory and CPU use when applying top-hat filters to spectrum data.\n\nThe easiest way to implement a top-hat filter is as matrix F.  The rows represent the filters.  The product of the filter and the data vector is the filtered spectrum.  The product of the filter times a diagnonal matrix constructed from the data times the transpose of the filter is the covariance of the filtered data.  The diagonal matrix constructed from the spectrum data is the covariance matrix associated with the spectrum data because the channels in the spectrum data are independent (thus the matrix is diagnonal) and the magnitude equals the counts in each channels because the spectrum data is nominally Poissonian and in the large number limit, the variance of a Poissonian random variable is the number itself (σ=sqrt(N) => Var = N)\n\nNotes on memory and code optimization: The filter matrix is banded diagonal.  Approximately, 2.5% of the elements are non-zero.  This suggest use of the BandedMatrix type.  The most expensive operation is calculating F⋅D⋅Fᵀ, the covariance matrix of the filtered data. D is a diagonal matrix and so computing each element in F⋅D⋅Fᵀ reduces to a sum over a single variable. Furthermore, the weighted least squares fit doesn't require the full F⋅D⋅Fᵀ, just diag(F⋅D⋅Fᵀ).  However, it turns out that we can do better implementing our own banded matrix type largely because D is fully diagonal and the matrix product F⋅D⋅Fᵀ reduces down to a sum over a single variable.  The product F⋅d and F⋅D⋅Fᵀ are readily implemented as element-by-element multiplies and sums.  Thus storing the filter as offsets and row filters is efficient in both memory and CPU use.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.ConstantWidthFilter","page":"Methods","title":"NeXLSpectrum.ConstantWidthFilter","text":"ConstantWidthFilter\n\nA top-hat filter that has constant width determined by FWHM at Mn Kα for all channels.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.GaussianFilter","page":"Methods","title":"NeXLSpectrum.GaussianFilter","text":"GaussianFilter\n\nA Gaussian-shaped filter that varies in width with the FWHM of the detector.  The Gaussian is offset to ensure the sum of the filter elements is zero.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.VariableWidthFilter","page":"Methods","title":"NeXLSpectrum.VariableWidthFilter","text":"VariableWidthFilter\n\nA top-hat filter that varies in width with the FWHM of the detector.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.tophatfilter","page":"Methods","title":"NeXLSpectrum.tophatfilter","text":"tophatfilter(\n    charLabel::CharXRayLabel,\n    thf::TopHatFilter,\n    scale::Float64 = 1.0,\n    tol::Float64 = 1.0e-6,\n)::FilteredReference\n\nFor filtering an ROI on a reference spectrum. Process a portion of a Spectrum with the specified filter.  Use a simple edge-based background model.\n\n\n\n\n\ntophatfilter(\n  reflabel::ReferenceLabel,\n  roi::UnitRange{Int},\n  thf::TopHatFilter,\n  scale = 1.0,\n  tol = 1.0e-6\n)::FilteredReference\n\nFor filtering an ROI on a reference spectrum. Process a portion of a Spectrum with the specified filter. Use a naive linear background model.\n\n\n\n\n\ntophatfilter(spec::Spectrum, thf::TopHatFilter, scale::Float64=1.0, tol::Float64 = 1.0e-4)::FilteredUnknown\n\nFor filtering the unknown spectrum. Defaults to the weighted fitting model.\n\n\n\n\n\ntophatfilter(::Type{FilteredUnknownW}, spec::Spectrum, thf::TopHatFilter, scale::Float64=1.0, tol::Float64 = 1.0e-4)::FilteredUnknownW\n\nFor filtering the unknown spectrum. Process the full Spectrum with the specified filter for use with the weighted least squares model.\n\n\n\n\n\ntophatfilter(spec::Spectrum, thf::TopHatFilter, scale::Float64=1.0, tol::Float64 = 1.0e-4)::FilteredDatum\n\nFor filtering the unknown spectrum. Process the full Spectrum with the specified filter.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.buildfilter","page":"Methods","title":"NeXLSpectrum.buildfilter","text":"buildfilter(det::Detector, a::Float64=1.0, b::Float64=2.0)::TopHatFilter\n\nBuild the default top-hat filter for the specified detector with the specified top and base parameters.\n\n\n\n\n\nbuildfilter(::Type{<:TopHatFilterType}, det::Detector, a::Float64=1.0, b::Float64=1.0)::TopHatFilter\n\nBuild a top-hat-style filter for the specified detector with the specified top and base parameters. The VariableWidthFilter and ConstantWidthFilter types are currently supported.\n\n\n\n\n\nbuildfilter(::Type{GaussianFilter}, det::Detector, a::Float64=1.0, b::Float64=5.0)::TopHatFilter\n\nBuild a top-hat filter with Gaussian shape whose width varies with the detector's resolution as a function of X-ray energy for the specified detector with the specified top and base parameters. The a parameter corresponds to the filter width relative to the detector resolution expressed as Gaussian width.  So a=1 is a filter whose width equals the detector resolution at each energy.  The b parameter is the extent of the filter in Gaussian widths.  The default a=1, b=5 corresponds to a  filter that has the same resolution as the detector and an extent of 2.5 Gaussian widths above and below the center channel.\n\n\n\n\n\n","category":"function"},{"location":"methods/","page":"Methods","title":"Methods","text":"NeXLSpectrum.FilteredReference","category":"page"},{"location":"methods/#NeXLSpectrum.FilteredReference","page":"Methods","title":"NeXLSpectrum.FilteredReference","text":"FilteredReference\n\nRepresents the filtered reference spectrum over an ROI. Carries the minimal data necessary to support filter-fitting a single region-of-interest (continguous range of channles) and computing useful output statistics.\n\n\n\n\n\n","category":"type"},{"location":"methods/","page":"Methods","title":"Methods","text":"NeXLSpectrum.FilteredUnknownW\r\nNeXLSpectrum.FilteredUnknownG\r\nNeXLSpectrum.filterfit\r\n","category":"page"},{"location":"methods/#NeXLSpectrum.FilteredUnknownW","page":"Methods","title":"NeXLSpectrum.FilteredUnknownW","text":"FilteredUnknownW\n\nRepresents the unknown in a filter fit using the weighted fitting model.  This is an approximation that produces over optimistic resulting covariance matrix.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.FilteredUnknownG","page":"Methods","title":"NeXLSpectrum.FilteredUnknownG","text":"FilteredUnknownG\n\nRepresents the unknown in a filter fit using the full generalized fitting model.  This model is expensive to calculate but uses the full generalized linear fitting model which produces the correct fit covariances.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.filterfit","page":"Methods","title":"NeXLSpectrum.filterfit","text":"filterfit(unk::FilteredUnknownW, ffs::AbstractVector{FilteredReference}, alg=fitcontiguousww)::UncertainValues\n\nFilter fit the unknown against ffs, an array of FilteredReference and return the result as an FilterFitResult object. By default use the generalized LLSQ fitting (pseudo-inverse implementation).\n\nThis function is designed to reperform the fit if one or more k-ratio is less-than-or-equal-to zero.  The FilteredReference corresponding to the negative value is removed from the fit and the fit is reperformed. How the non-positive value is handled is determine by forcezeros. If forcezeros=true, then the returned k-ratio for the non-positive value will be set to zero (but the uncertainty remains the fitted one).  However, if forcezeros=false, then the final non-positive k-ratio is returned along with the associated uncertainty.  forcezeros=false is better when a number of fit k-ratio sets are combined to produce an averaged k-ratio with reduced uncertainty. forcezeros=true would bias the result positive.\n\n\n\n\n\nfilterfit(unk::FilteredUnknownG, ffs::AbstractVector{FilteredReference}, alg=fitcontiguousw)::UncertainValues\n\nFilter fit the unknown against ffs, an array of FilteredReference and return the result as an FilterFitResult object. By default use the generalized LLSQ fitting (pseudo-inverse implementation).\n\n\n\n\n\n","category":"function"},{"location":"methods/","page":"Methods","title":"Methods","text":"NeXLSpectrum.BasicFitResult\r\nNeXLSpectrum.FilterFitResult\r\nNeXLSpectrum.kratios\r\nNeXLSpectrum.spectrum\r\nNeXLSpectrum.residual\r\nNeXLUncertainties.covariance\r\nNeXLSpectrum.filteredresidual","category":"page"},{"location":"methods/#NeXLSpectrum.BasicFitResult","page":"Methods","title":"NeXLSpectrum.BasicFitResult","text":"The result of a spectrum fit.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.FilterFitResult","page":"Methods","title":"NeXLSpectrum.FilterFitResult","text":"FilterFitResult\n\nRepresents the result of fitting either FilteredUnknownG or FilteredUnknownW to a FilteredUnknown.\n\nStruct elements\n\nlabel::UnknownLabel  # Identifies the unknown\nkratios::UncertainValues # Labeled with ReferenceLabel objects\nroi::UnitRange{Int} # Range of channels fit\nraw::Vector{Float64} # Raw spectrum data\nresidual::Vector{Float64} # Residual spectrum\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.kratios","page":"Methods","title":"NeXLSpectrum.kratios","text":"kratios(ffr::FitResult)::Vector{KRatio}\n\nThe k-ratios associated with each CharXRayLabel as a vector 'KRatio' objects.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.spectrum","page":"Methods","title":"NeXLSpectrum.spectrum","text":"spectrum(fl::FilteredLabel)::Spectrum\n\nThe spectrum associated with a FilteredLabel-based type.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.residual","page":"Methods","title":"NeXLSpectrum.residual","text":"residual(ffr::FilterFitResult)::Spectrum\n\nA Spectrum containing the histogram representing the unknown spectrum minus the fitted characteristic peaks shapes times the best fit coefficient.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLUncertainties.covariance","page":"Methods","title":"NeXLUncertainties.covariance","text":"covariance(fd::FilteredUnknownW, roi::UnitRange{Int})\n\nLike extract(fd,roi) except extracts the covariance diagnonal elements over the specified range of channels. roi must be fully contained within the data in fd.\n\n\n\n\n\ncovariance(fd::FilteredUnknownG, roi::UnitRange{Int})::AbstractMatrix{Float64}\n\nLike extract(fd,roi) except extracts the covariance matrix over the specified range of channels.  roi must be fully contained within the filtered edata in fd.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.filteredresidual","page":"Methods","title":"NeXLSpectrum.filteredresidual","text":"filteredresidual(fit::FilterFitResult, unk::FilteredUnknown, ffs::AbstractVector{FilteredReference})::Vector{Float64}\n\nComputes the difference between the best fit and the unknown filtered spectral data.\n\n\n\n\n\n","category":"function"},{"location":"methods/","page":"Methods","title":"Methods","text":"NeXLSpectrum.ReferenceLabel\r\nNeXLSpectrum.SpectrumFeature\r\nNeXLSpectrum.CharXRayLabel\r\nNeXLSpectrum.EscapeLabel\r\nNeXLSpectrum.UnknownLabel","category":"page"},{"location":"methods/#NeXLSpectrum.ReferenceLabel","page":"Methods","title":"NeXLSpectrum.ReferenceLabel","text":"ReferenceLabel\n\nA label associated with reference spectra.  The label encapsulates the original spectrum and the range of channels represented by this reference object.  structs that extend ReferenceLabel should have .roi and .spec members.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.SpectrumFeature","page":"Methods","title":"NeXLSpectrum.SpectrumFeature","text":"SpectrumFeature\n\nA union representing the different type of peak-like features (helpful and harmful) that can appear in a spectrum.\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLSpectrum.CharXRayLabel","page":"Methods","title":"NeXLSpectrum.CharXRayLabel","text":"CharXRayLabel\n\nA ReferenceLabel<:FilteredLabel  that Represents a reference spectrum associated with a set of characteristic x-rays (CharXRay) objects over a contiguous range of spectrum channels.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.EscapeLabel","page":"Methods","title":"NeXLSpectrum.EscapeLabel","text":"EscapeLabel\n\nA ReferenceLabel<:FilteredLabel that Represents a reference spectrum associated with an escape peak from a set of characteristic x-rays (CharXRay) objects over a contiguous range of spectrum channels.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.UnknownLabel","page":"Methods","title":"NeXLSpectrum.UnknownLabel","text":"UnknownLabel\n\nA FilteredLabel that represents the unknown spectrum.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Plot-Scaling-Modes","page":"Methods","title":"Plot Scaling Modes","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"These types define the different ways that spectra can be scaled when plotted using the Gadfly.plot(...) methods.","category":"page"},{"location":"methods/","page":"Methods","title":"Methods","text":"NeXLSpectrum.SpectrumScaling\r\nNeXLSpectrum.NoScaling\r\nNeXLSpectrum.ScaleSum\r\nNeXLSpectrum.ScaleDose\r\nNeXLSpectrum.ScaleDoseWidth\r\nNeXLSpectrum.ScaleROISum\r\nNeXLSpectrum.ScalePeak\r\nNeXLSpectrum.ScaleWidth","category":"page"},{"location":"methods/#NeXLSpectrum.SpectrumScaling","page":"Methods","title":"NeXLSpectrum.SpectrumScaling","text":"SpectrumScaling types are designed to rescale spectrum data primarily for plotting.\n\nImplement\n\nBase.show(io::IO, scn::SpectrumScaling)\nscalefactor(sc::SpectrumScaling, spec::Spectrum)\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.NoScaling","page":"Methods","title":"NeXLSpectrum.NoScaling","text":"Don't scale the spectrum data.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.ScaleSum","page":"Methods","title":"NeXLSpectrum.ScaleSum","text":"Scale to a fixed total integral.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.ScaleDose","page":"Methods","title":"NeXLSpectrum.ScaleDose","text":"Scale to a constant dose (Counts/(nA⋅s)).   Requires a spectrum has both :ProbeCurrent & :LiveTime.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.ScaleDoseWidth","page":"Methods","title":"NeXLSpectrum.ScaleDoseWidth","text":"Scale to a constant dose⋅width (Counts/(nA⋅s/eV))  Requires a spectrum has both :ProbeCurrent & :LiveTime.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.ScaleROISum","page":"Methods","title":"NeXLSpectrum.ScaleROISum","text":"Scale to a default sum in the specified ROI.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.ScalePeak","page":"Methods","title":"NeXLSpectrum.ScalePeak","text":"Scale to a fixed peak intensity\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.ScaleWidth","page":"Methods","title":"NeXLSpectrum.ScaleWidth","text":"Scale to a constant dose⋅width (Counts/(nA⋅s/eV))  Requires a spectrum has both :ProbeCurrent & :LiveTime.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Energy-Axis-Scales","page":"Methods","title":"Energy Axis Scales","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"NeXLSpectrum.EnergyScale\r\nNeXLSpectrum.LinearEnergyScale\r\nNeXLSpectrum.PolyEnergyScale","category":"page"},{"location":"methods/#NeXLSpectrum.EnergyScale","page":"Methods","title":"NeXLSpectrum.EnergyScale","text":"EnergyScale\n\nAn EnergyScale is a way of representing the energy axis associated with X-ray data. The scale may be linear, polynomial or ??? to handle the various different non-linearities that happen with EDS detectors plus we can also handle WDS wavescans.\n\nImplements:\n\nchannel(eV::AbstractFloat, sc::EnergyScale)::Int\nenergy(ch::Int, sc::EnergyScale)::Float64\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.LinearEnergyScale","page":"Methods","title":"NeXLSpectrum.LinearEnergyScale","text":"LinearEnergyScale\n\nAn EnergyScale implementation parameterized by channel width and offset.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.PolyEnergyScale","page":"Methods","title":"NeXLSpectrum.PolyEnergyScale","text":"PolyEnergyScale\n\nAn energy scale based on a polynomial function of the channel index.\n\n\n\n\n\n","category":"type"},{"location":"methods/","page":"Methods","title":"Methods","text":"NeXLSpectrum.Detector\r\nNeXLSpectrum.EDSDetector\r\n\r\nNeXLSpectrum.resolution\r\nNeXLSpectrum.Resolution\r\nNeXLSpectrum.simpleEDSwICC\r\n","category":"page"},{"location":"methods/#NeXLSpectrum.Detector","page":"Methods","title":"NeXLSpectrum.Detector","text":"Detector\n\nAn abstract type defining the characteristics of an X-ray detector.\n\nImplements:\n\nchannelcount(det::Detector)::Int\nscale(det::Detector)::EnergyScale\nresolution(eV::Float64, det::Detector)::Float64 # FWHM at eV\nenergy(ch::Int, det::Detector)::Float64\nchannel(eV::Float64, det::Detector)::Int\nprofile(energy::Float64, xrayE::Float64, det::Detector)\nlld(det::Detector)::Int\nvisible(sf::SpectrumFeature, det::Detector)\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.EDSDetector","page":"Methods","title":"NeXLSpectrum.EDSDetector","text":"EDSDetector\n\nTypes extending EDSDetector must have member variables\n\nchannelcount::Int # Number of channels\nscale::EnergyScale # Detector calibration funtion\nresolution::Resolution # Detector lineshape function\nlld::Int # low level discriminator\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.resolution","page":"Methods","title":"NeXLSpectrum.resolution","text":"\"     resolution(eV::Float64, res::Resolution)     resolution(eV::Float64, det::EDSDetector)\n\nThe FWHM at eV for the <:Resolution model.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.Resolution","page":"Methods","title":"NeXLSpectrum.Resolution","text":"Resolution\n\nAn abstract type describing the channel dependence of the resolution of an EDS detector.\n\nImplements:\n\nresolution(eV::Float64, res::Resolution)::Float # Resolution at specified energy\nprofile(energy::Float64, xrayE::Float64, res::Resolution) # Amplitude for a signal at the specified energy at the specified energy\nextent(xrayE::Float64, res::Resolution, ampl::Float64)::Tuple{2,Float} # The range of channels over which the signal exceeds ampl\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.simpleEDSwICC","page":"Methods","title":"NeXLSpectrum.simpleEDSwICC","text":"simpleEDSwICC(chCount::Integer, width::Float64, offset::Float64, fwhmatmnka::Float64, lld::Int=channel(150.0 eV))\n\nConstruct simple model of an EDS detector with incomplete charge collection at low X-ray energies.\n\n\n\n\n\n","category":"function"},{"location":"methods/","page":"Methods","title":"Methods","text":"NeXLSpectrum.Signal\r\nNeXLSpectrum.HyperSpectrum\r\nNeXLSpectrum.readrplraw\r\nNeXLSpectrum.ashyperspectrum\r\n\r\nNeXLSpectrum.plane\r\nNeXLSpectrum.roiimage\r\nNeXLSpectrum.asimage\r\nNeXLSpectrum.compressed\r\nNeXLSpectrum.maxpixel\r\n\r\nNeXLSpectrum.generated\r\nNeXLSpectrum.continuumrois\r\nNeXLSpectrum.emitted\r\nNeXLSpectrum.fitcontinuum\r\nNeXLSpectrum.indexofmaxpixel\r\nNeXLSpectrum.roiimages\r\nNeXLSpectrum.detectorresponse\r\nNeXLCore.weight\r\nNeXLSpectrum.extents\r\nNeXLSpectrum.profile\r\n\r\n\r\nNeXLSpectrum.subtractcontinuum\r\nNeXLSpectrum.heterogeneity\r\nNeXLSpectrum.visible\r\nNeXLUncertainties.extract\r\nNeXLSpectrum.extent\r\nNeXLSpectrum.characteristiccounts\r\nNeXLSpectrum.scale\r\nNeXLSpectrum.HyperspectrumQuant\r\nNeXLSpectrum.charXRayLabels\r\nNeXLSpectrum.channelcount","category":"page"},{"location":"methods/#NeXLSpectrum.Signal","page":"Methods","title":"NeXLSpectrum.Signal","text":"The multidimensional dataset with an EnergyScale and Symbol indexed properties.  A Signal contains N spatial/temporal axes and 1 data axis. An object might be constructed as Signal(energy, props, (4096, 1024, 2048)) where there are 4096 channels, 1024 rows and 2048 columns. Signal may be 1, 2,.. N dimensional but since they reside in memory, there are practical limits.\n\nA type for data sets containing multiple closely related spectra.  A Signal is slighly more restricted than an Array{Spectrum,N} because all the Spectra in a Signal are assumed to have certain properties in common -  the EnergyScale and a set of common Spectrum properties.  You can also specify an efficient packing of the data by using UInt8, UInt16, ... etc as required to hold the data.\n\nSpecial property tags:\n\n:Elapse  # Total elapse time for map (so sig[:RealTime] ≈ sig[:Elapse]/length(sig)\n:Axes # Names for axes [ \"Data\", \"Y\", \"X\" ]\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.HyperSpectrum","page":"Methods","title":"NeXLSpectrum.HyperSpectrum","text":"HyperSpectrum(sig::Signal)\n\nHyperSpectrum is a wrapper around Signal to facilitate access to the the data as Spectrum objects.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.readrplraw","page":"Methods","title":"NeXLSpectrum.readrplraw","text":"readrplraw(rplfilename::AbstractString, rawfilename::AbstractString, scale::EnergyScale, props::Dict{Symbol,Any}=Dict{Symbol,Any}())\nreadrplraw(rplio::IO, rawio::IO, scale::EnergyScale, props::Dict{Symbol,Any}=Dict{Symbol,Any}())\n\nRead a RPL/RAW file pair from IO or filename into a Signal obect.  The reader supports :bigendian, :littleendian ordering and :vector or :image alignment.  Since the Signal can be very large it is beneficial to release and collected the associated memory when you are done with the data by assigning nothing to the variable (or allowing it to go out of scope) and then calling GC.gc() to force a garbage collection.\n\n* Ordering: The individual data items may be in `:littleendian` or `:bigendian`.\n** `:littleendian` => Intel/AMD and others\n** `:bigendian` => ARM/PowerPC/Motorola\n* Alignment:  The data in the file can be organized as `:vector` or `:image`.  However, the data will be\n\nreorganized into 'vector' format when returned as a Signal.     **:vector => Spectrum/data vector as contiguous blocks by pixel     ** :image => Each channel of data organized in image planes     * Data types: signed/unsigned 8/16/32-bit integers or 16-bit/32-bit/64-bit floats\n\nStandard LISPIX Parameters in .rpl File\n\n.rpl files consist of 9 lines.  Each line consists of a 'key'<tab>'value' where there is one and only one tab and possibly other space between the parameter name and parameter value. Parameter names are case-insensitive. The first line in the files is \"key<tab>value\".  Subsequent lines contain the keys and values described in this table.\n\nkey value description\nwidth 849 pixels per row       integer\nheight 846 rows                 integer\ndepth 4096 images or spec pts   integer\noffset 0 bytes to skip        integer\ndata-length 1 bytes per pixel      1, 2, 4, or 8\ndata-type unsigned signed, unsigned, or float\nbyte-order dont-care big-endian, little-endian, or dont-care\nrecord-by vector image, vector, or dont-care\n\nThis .rpl file indicates the image is 849 pixels wide and 846 pixels high, with 4096 levels in the depth dimension.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.ashyperspectrum","page":"Methods","title":"NeXLSpectrum.ashyperspectrum","text":"ashyperspectrum(sig::Signal, name::AbstractString=\"Hyper-Spectrum\")\n\nConvert the Array{<:Real, N} perspective into a Array{Spectrum{<:Real}, N} perspective.\n\nSpecial property tags:\n\n:Cartesian # The pixel index of a Spectrum extracted from a HyperSpectrum\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.plane","page":"Methods","title":"NeXLSpectrum.plane","text":"plane(hss::Signal, chs::AbstractUnitRange{<:Integer}, normalize=false)\n\nSums a contiguous range of data planes into an Array. The dimension of the result is one less than the dimension of the Signal.\n\n\n\n\n\nplane(hss::Signal, ch::Int, normalize=false)\n\nSums a contiguous range of data planes into an Array. The dimension of the result is one less than the dimension of the Signal.\n\n\n\n\n\nplane(hss::HyperSpectrum, chs::Union{Int,AbstractUnitRange{<:Integer}}, norm=false) =\n\nExtract as an Array the sum of the data in chs.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.roiimage","page":"Methods","title":"NeXLSpectrum.roiimage","text":"roiimage(hss::Signal, chs::AbstractUnitRange{<:Integer})\n\nCreate a count map from the specified contiguous range of channels.\n\n\n\n\n\nroiimage(hss::Signal, cxr::CharXRay, n=5)\n\nCreate a count map for the specified characteristic X-ray.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.asimage","page":"Methods","title":"NeXLSpectrum.asimage","text":"asimage(vqr::HyperspectrumQuant, idx::Int; transform=identity)\n\nCreate an image that represents the data associated with the idx label. transform is a function nominally from x -> [0,1] which is applied to the raw quantified results.\n\nExamples:\n\ntransform=x->0.8x                  # linear scaling\ntransform=x->log10(1.0+99.0x)/2.0  # log scaling\ntransform=x->1.0-x                 # invert\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.compressed","page":"Methods","title":"NeXLSpectrum.compressed","text":"compressed(sig::Signal)\n\nReturns a Signal with smaller or equal storage space to sig without losing any infomation.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.maxpixel","page":"Methods","title":"NeXLSpectrum.maxpixel","text":"maxpixel(sig::Signal)\n\nCompute Bright's Max-Pixel derived signal.\n\n\n\n\n\nmaxpixel(hss::HyperSpectrum)\n\nProduce a maxpixel spectrum.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.generated","page":"Methods","title":"NeXLSpectrum.generated","text":"generated(cm::ContinuumModel, ea::Float64)\n\nCompute the intensity of the measured continuum generated from the material and conditions specified in the continuum model object at the specified measured energy ea.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.continuumrois","page":"Methods","title":"NeXLSpectrum.continuumrois","text":"continuumrois(elms, det::EDSDetector, minE::Float64, maxE::Float64)\n\nCompute the ROIs for the contiguous continuum regions for the specified elements elms on an EDSDetector for the specified range of energies.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.emitted","page":"Methods","title":"NeXLSpectrum.emitted","text":"emitted(cm::ContinuumModel, ea::Float64)\n\nCompute the intensity of the measured continuum emitted from the material and conditions specified in the continuum model object at the specified measured energy ea.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.fitcontinuum","page":"Methods","title":"NeXLSpectrum.fitcontinuum","text":"fitcontinuum(\n  spec::Spectrum,\n  resp::AbstractArray,\n  rois::Vector{UnitRange};\n  brem::Type{<:NeXLBremsstrahlung} = Castellano2004a,\n  mc::Type{<:MatricCorrection} = Riveros1993,\n)\n\nFit a continuum model to the specified range of channels (`rois`).  The `resp` argument is a matrix which describes\n\nthe detector response on a channel-by-channel basis.  It can be calculated from an EDSDetector and an DetectorEfficiency using resp = NeXLSpectrum.detectorresponse(det, eff).  The Spectrum object must have the :Composition, :BeamEnergy and :TakeOffAngle properties defined.\n\n\n\n\n\nfitcontinuum(\n  spec::Spectrum,\n  det::EDSDetector,\n  resp::AbstractArray{<:Real,2}; #\n  minE::Float64 = 1.5e3,\n  maxE::Float64 = 0.95 * spec[:BeamEnergy],\n  brem::Type{<:NeXLBremsstrahlung} = Castellano2004a,\n  mc::Type{<:MatrixCorrection} = Riveros1993,\n)\n\nFit the continuum from ROIs determined from the data within the spectrum (:Composition, :BeamEnergy & :TakeOffAngle). The ROIs are computed using continuumrois(...) and each roi is fit seperately.\n\nfittedcontinuum(\n  spec::Spectrum,\n  det::EDSDetector,\n  resp::AbstractArray{<:Real,2}; #\n  mode = :Global [ | :Local ] # Fit to all ROIs simultaneously (:Global) or to each roi independently (:Local)\n  minE::Float64 = 1.5e3,\n  maxE::Float64 = 0.95 * spec[:BeamEnergy],\n  brem::Type{<:NeXLBremsstrahlung} = Castellano2004a,\n  mc::Type{<:MatrixCorrection} = Riveros1993,\n)::Spectrum\n\nFit the continuum under the characteristic peaks by fitting the closest continuum ROIs.  The low energy peaks are fit using the continuum immediately higher in energy and the high energy peaks are fit using the continuum on both sides.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.indexofmaxpixel","page":"Methods","title":"NeXLSpectrum.indexofmaxpixel","text":"indexofmaxpixel(sig::Signal, ch::Int) # at channel `ch`\nindexofmaxpixel(sig::Signal) # all channels\nindexofmaxpixel(sig::Signal, ch::Int, cis::CartesianIndices)\nindexofmaxpixel(sig::Signal, cis::CartesianIndices)\nindexofmaxpixel(hs::HyperSpectrum, ch::Int) # at channel `ch`\nindexofmaxpixel(hs::HyperSpectrum) # all channels\nindexofmaxpixel(hs::HyperSpectrum, ch::Int, cis::CartesianIndices)\nindexofmaxpixel(hs::HyperSpectrum, cis::CartesianIndices)\n\nFind the coordinates producing the maximum value in data[ch] or data[:] within 'cis' or full spatial dimensions.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.roiimages","page":"Methods","title":"NeXLSpectrum.roiimages","text":"roiimages(hss::Signal, achs::Vector{AbstractUnitRange{<:Integer}})\n\nCreate an array of Gray images representing the intensity in each range of channels in in achs.  They are normalized such the the most intense pixel in any of them defines white.\n\n\n\n\n\nroiimages(hss::HyperSpectrum, achs::Vector{AbstractUnitRange{<:Integer}})\n\nCreate an array of Gray images representing the intensity in each range of channels in in achs.  They are normalized such the the most intense pixel in any of them defines white.\n\n\n\n\n\nroiimages(hss::HyperSpectrum, cxrs::Vector{CharXRay}, n=5)\n\nCreate an array of Gray images representing the intensity in each of the CharXRay lines in cxrs.  They are normalized such the the most intense pixel in any of them defines white.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.detectorresponse","page":"Methods","title":"NeXLSpectrum.detectorresponse","text":"detectorresponse(det::EDSDetector, eff::DetectorEfficiency, incidence::Float64=π/2)::AbstractMatrix\n\nBuild a matrix which models the detector response including aspects like the detector efficiency, the resolution, the escape peaks.  All the warts that can be modeled within a linear model but not things like coincidence peaks that are non-linear.  This function can (!should!) be specialized for more sophisticated detector models that include more warts.\n\nExample:\n\ngenint = computegeneratedintensity(....) # Either characteristic or Bremsstrahlung...\ndet = simpleEDS(4096, 5.0, 0.0, 132.0, 10)\neff = SDDEfficiency(AP33Tabulation(); thickness=0.0370, deadlayer=30.0e-7, entrance=Film(pure(n\"Al\"), 10.0e-7))\nresp = detectorresponse(det, eff)\n# finally compute the measured signal\nmeasured = genint*resp\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.weight","page":"Methods","title":"NeXLCore.weight","text":"weight(esc::EscapeArtifact, factor=0.01)\n\nThe weight of an EscapeArtifact which is factor * weight(esc.xray).\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.extents","page":"Methods","title":"NeXLSpectrum.extents","text":"extents(cxrs::AbstractVector{<:SpectrumFeature},det::Detector,ampl::Float64)::Vector{UnitRange{Int}}\n\nDetermine the contiguous ranges of channels over which the specified collection of X-rays will be measured on the specified detector.  The ampl determines the extent of each peak.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.profile","page":"Methods","title":"NeXLSpectrum.profile","text":"\"     profile(energy::Float64, xrayE::Float64, res::Resolution)\n\nCalculates a Gaussian profile for an X-ray of xrayE (eV) for a detector with the specified resolution.  Maintains normalization to a sum of unity.\n\n\n\n\n\n\"     profile(ch::Int, xrayE::Float64, det::EDSDetector)\n\nCalculates the profile for an X-ray of xrayE (eV) for a detector with the specified resolution.  Performs a crude integration to account for the channel width.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.subtractcontinuum","page":"Methods","title":"NeXLSpectrum.subtractcontinuum","text":"subtractcontinuum(\n  spec::Spectrum,\n  det::EDSDetector,\n  resp::AbstractArray{<:Real,2}; #\n  minE::Float64 = 1.5e3,\n  maxE::Float64 = 0.95 * spec[:BeamEnergy],\n  brem::Type{<:NeXLBremsstrahlung} = Castellano2004a,\n  mc::Type{<:MatrixCorrection} = Riveros1993,\n)::Spectrum\n\nComputes the characteristic-only spectrum by subtracting the .\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.heterogeneity","page":"Methods","title":"NeXLSpectrum.heterogeneity","text":"heterogeneity(lbl::ReferenceLabel, ffrs::Vector{FilterFitResult})\n\nComputes the ratio of the standard deviation of the measured values over the mean calculated uncertainty from the fit.  A value near 1 means the sample appears homogeneous and a value greater than 1 means the sample appears heterogeneous.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.visible","page":"Methods","title":"NeXLSpectrum.visible","text":"visible(cxrs::AbstractVector{<:SpectrumFeature}, det::Detector)\n\nReturns the characteristic x-rays that are visible on the specified detector (ie. Between the LLD and the maximum channel).\n\n\n\n\n\nvisible(sf::SpectrumFeature, det::Detector)\n\nIs sf visible on the specified Detector?\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLUncertainties.extract","page":"Methods","title":"NeXLUncertainties.extract","text":"extract(fd::FilteredReference, roi::UnitRange{Int})\n\nExtract the filtered data representing the specified range.  roi must fully encompass the filtered data in fd.\n\n\n\n\n\nextract(fd::FilteredUnknown, roi::UnitRange{Int})::AbstractVector{Float64}\n\nExtract the filtered data representing the specified range.  roi must be fully contained within the filtered data in fd.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.extent","page":"Methods","title":"NeXLSpectrum.extent","text":"extent(xrayE::Float64, res::Resolution, ampl::Float64)\n\nCalculates the extent of the peak interval for an x-ray of the specified energy.\n\n\n\n\n\nextent(escape::EscapeArtifact, res::Resolution, ampl::Float64)::Tuple{2,Float64}\n\nThe extent of an escape artifact is determined by the resolution of the detector at the energy of the escape peak.\n\n\n\n\n\nextent(escape::ComptonArtifact, res::Resolution, ampl::Float64)::Tuple{2,Float64}\n\nThe extent of a Compton artifact is determined by the resolution of the detector at the energy of the Compton peak.\n\n\n\n\n\nextent(sf::SpectrumFeature, det::Detector, ampl::Float64)::Tuple{Float64, Float64}\n\nComputes the channel range encompassed by the specified set of x-ray transitions down to an intensity of ampl.  Relative line weights are taken into account.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.characteristiccounts","page":"Methods","title":"NeXLSpectrum.characteristiccounts","text":"characteristiccounts(ffr::FiterFitResult, strip)\n\nNumber of spectrum counts that were accounted for by the fitted elements with the strip Element(s) removed.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.scale","page":"Methods","title":"NeXLSpectrum.scale","text":"scale(det::Detector)\n\nEnergyScale associated with this detector.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.HyperspectrumQuant","page":"Methods","title":"NeXLSpectrum.HyperspectrumQuant","text":"HyperspectrumQuant\n\nRepresents the result from a fit(...) of a HyperSpectrum object.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLSpectrum.charXRayLabels","page":"Methods","title":"NeXLSpectrum.charXRayLabels","text":"charXRayLabels(#\n  spec::Spectrum, #\n  elm::Element, #\n  allElms::AbstractVector{Element}, #\n  det::Detector, #\n  ampl::Float64, #\n  maxE::Float64=1.0e6)::Vector{SpectrumFeature}\n\nCreates a vector CharXRayLabel objects associated with 'elm' for a spectrum containing the elements 'allElms' assuming that it was collected on 'det'.  ROIs in which other elements from 'allElms' interfere with 'elm' will not be included.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.channelcount","page":"Methods","title":"NeXLSpectrum.channelcount","text":"channelcount(det::Detector)\n\nNumber of detector channels.\n\n\n\n\n\n","category":"function"},{"location":"methods/","page":"Methods","title":"Methods","text":"NeXLSpectrum.Beryllium\r\nNeXLSpectrum.AP33Tabulation","category":"page"},{"location":"methods/#NeXLSpectrum.Beryllium","page":"Methods","title":"NeXLSpectrum.Beryllium","text":"Beryllium(thickness=5.0e-4)\n\nConstruct a beryllium window.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLSpectrum.AP33Tabulation","page":"Methods","title":"NeXLSpectrum.AP33Tabulation","text":"AP33Tabulation()\nAP5Tabulation()\n\nConstruct tabulated window models for the Moxtek AP3.3 and AP5 windows.\n\n\n\n\n\n","category":"function"},{"location":"K412fit/#Quantifying-K412-using-NeXLSpectrum-and-NeXLMatrixCorrection","page":"Fitting K412","title":"Quantifying K412 using NeXLSpectrum and NeXLMatrixCorrection","text":"","category":"section"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Use the NeXLSpectrum to load, plot, fit and report the quantification of a set of K412 spectra.","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Loading NeXLSpectrum also automatically makes NeXLCore and NeXLUncertainties available.","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Loading the Gadfly library adds plotting support to NeXLSpectrum.","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"using NeXLSpectrum              # Provides spectrum reading and fitting tools\nusing NeXLMatrixCorrection      # Provides `quant` to convert k-ratios to mass fraction.\nusing Gadfly                    # Plotting\nusing DataFrames, Latexify      # Tables","category":"page"},{"location":"K412fit/#Read-in-the-Spectra","page":"Fitting K412","title":"Read in the Spectra","text":"","category":"section"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"path = \"K412 spectra\"\n# Load a single spectrum\nfe = loadspectrum(joinpath(path, \"Fe std.msa\"))\n# Create a detector model to match it\ndet = matching(fe, 132.0, 10)\n# Now load all the spectra using this detector\nunks = (i->loadspectrum(joinpath(path, \"III-E K412[$i][4].msa\"),det)).(0:4)\nal2o3 = loadspectrum(joinpath(path, \"Al2O3 std.msa\"),det)\ncaf2 = loadspectrum(joinpath(path, \"CaF2 std.msa\"),det)\nfe = loadspectrum(joinpath(path, \"Fe std.msa\"),det)\nmgo = loadspectrum(joinpath(path, \"MgO std.msa\"),det)\nsio2 = loadspectrum(joinpath(path, \"SiO2 std.msa\"),det)\n# Add carbon coating\nmap(s->s[:Coating]=Film(pure(n\"C\"), 30.0e-7), unks)\nmap(s->s[:Coating]=Film(pure(n\"C\"), 10.0e-7), (al2o3, caf2, mgo, sio2));","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"(10.0 nm of Pure C, 10.0 nm of Pure C, 10.0 nm of Pure C, 10.0 nm of Pure C\n)","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Table: The spectra","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Name BeamEnergy ProbeCurrent LiveTime RealTime Coating Integral Material\nIII-E K412[0][all] 2e+04 1.114 235.5 286.3 30.0 nm of Pure C 8.079e+06 K412\nIII-E K412[1][all] 2e+04 1.114 235.4 286.2 30.0 nm of Pure C 8.077e+06 K412\nIII-E K412[2][all] 2e+04 1.112 235.5 286.3 30.0 nm of Pure C 8.084e+06 K412\nIII-E K412[3][all] 2e+04 1.11 235.4 286.3 30.0 nm of Pure C 8.087e+06 K412\nIII-E K412[4][all] 2e+04 1.11 235.4 286.2 30.0 nm of Pure C 8.081e+06 K412\nAl2O3 std 2e+04 1.11 1172 1491 10.0 nm of Pure C 4.974e+07 Al2O3\nCaF2 std 2e+04 1.11 1176 1456 10.0 nm of Pure C 4.406e+07 CaF2\nFe std 2e+04 1.11 1171 1529 nothing 5.445e+07 Fe\nMgO std 2e+04 1.106 1176 1496 10.0 nm of Pure C 4.985e+07 MgO\nSiO2 std 2e+04 1.11 1173 1470 10.0 nm of Pure C 4.665e+07 SiO2","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Notice that the spectra all have 1) live-time (:LiveTime); 2) probe-current (:ProbeCurrent); 3) take-off angle (:TakeOffAngle); 4) beam energy (:BeamEnergy); and detector (:Detector) properties defined.  These properties are necessary for extracting the k-ratios and estimating the composition.","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"sio2[:LiveTime], sio2[:ProbeCurrent], sio2[:TakeOffAngle], sio2[:BeamEnergy], sio2[:Detector]","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"(1173.1648, 1.10989, 0.6108652381980153, 20000.0, BasicEDS(4096, E[ch] = 1.\n63032 + 9.99856⋅ch, 132.0 eV @ Mn K-L3, 10, Dict{Shell,Element}(Shell[L] =>\n Element(Scandium),Shell[K] => Element(Beryllium),Shell[N] => Element(Pluto\nnium),Shell[M] => Element(Barium))))","category":"page"},{"location":"K412fit/#The-Unknowns","page":"Fitting K412","title":"The Unknowns","text":"","category":"section"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"display(plot(unks..., klms=[n\"O\",n\"Mg\",n\"Al\",n\"Si\",n\"Ca\",n\"Fe\"], xmax=8.0e3))","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"(Image: )","category":"page"},{"location":"K412fit/#The-Reference-Spectra","page":"Fitting K412","title":"The Reference Spectra","text":"","category":"section"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Build a convenient structure so it is easy to appreciate the necessary information and to splat it into filteredReference.","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"refs = (\n  # spectrum, element, composition\n  ( al2o3, n\"Al\", mat\"Al2O3\" ), #\n  ( mgo,   n\"Mg\", mat\"MgO\" ),   #\n  ( fe,    n\"Fe\", mat\"Fe\" ),    #\n  ( sio2,  n\"Si\", mat\"SiO2\" ),  #\n  ( sio2,  n\"O\",  mat\"SiO2\" ),  #\n  ( caf2,  n\"Ca\", mat\"CaF2\" ), )\ndisplay(plot(al2o3, caf2, fe, mgo, sio2, klms=collect( ref[2] for ref in refs), xmax=8.0e3))","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"(Image: )","category":"page"},{"location":"K412fit/#Pre-filter-the-Reference-Spectra","page":"Fitting K412","title":"Pre-filter the Reference Spectra","text":"","category":"section"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"# Build a top-hat filter\nfilt = buildfilter(NeXLSpectrum.GaussianFilter,det)\n# Filter all the reference spectra\nfrs = mapreduce(ref->filterreference(filt, ref..., withEsc=true), append!, refs)\n# frs is now a FilteredReference[] used to fit the unknowns.","category":"page"},{"location":"K412fit/#Fit-the-Pre-Filtered-References-to-the-Unknowns","page":"Fitting K412","title":"Fit the Pre-Filtered References to the Unknowns","text":"","category":"section"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"res= [ fit(unk,filt,frs,false) for unk in unks ]","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"5-element Array{FilterFitResult,1}:\n III-E K412[0][all]\n III-E K412[1][all]\n III-E K412[2][all]\n III-E K412[3][all]\n III-E K412[4][all]","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Spectra O K-L3 + 1 other Fe L3-M5 + 11 others Mg K-L3 + 1 other Al K-L3 + 1 other Si K-L3 + 2 others Ca K-L3 + 3 others Fe K-L3 + 1 other Fe K-M3 + 3 others\nIII-E K412[0][all] 0.652 0.04245 0.1475 0.06704 0.351 0.1922 0.06684 0.06675\nIII-E K412[1][all] 0.654 0.04208 0.1474 0.06677 0.3501 0.1916 0.06706 0.06733\nIII-E K412[2][all] 0.6545 0.04245 0.1478 0.06713 0.3513 0.1922 0.06686 0.06691\nIII-E K412[3][all] 0.6589 0.04199 0.148 0.0672 0.3521 0.1926 0.06682 0.06768\nIII-E K412[4][all] 0.6573 0.04136 0.1481 0.06731 0.352 0.1922 0.06692 0.06648","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Let's take a look at a residual spectrum by plotting one of the FilterFitResult objects.","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"plot(res[1])","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"(Image: )","category":"page"},{"location":"K412fit/#Quantify-the-k-ratios-by-Matrix-Correction","page":"Fitting K412","title":"Quantify the k-ratios by Matrix Correction","text":"","category":"section"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"quant = quantify.(res)","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"5-element Array{IterationResult,1}:\n Converged to III-E K412[0][all][Fe=0.0805,Al=0.0482,Si=0.2073,O=0.4297,Mg=\n0.1148,Ca=0.1088] in 8 steps\n\n Converged to III-E K412[1][all][Fe=0.0808,Al=0.0480,Si=0.2069,O=0.4302,Mg=\n0.1148,Ca=0.1085] in 10 steps\n\n Converged to III-E K412[2][all][Fe=0.0805,Al=0.0483,Si=0.2076,O=0.4309,Mg=\n0.1151,Ca=0.1088] in 8 steps\n\n Converged to III-E K412[3][all][Fe=0.0805,Al=0.0483,Si=0.2080,O=0.4333,Mg=\n0.1152,Ca=0.1090] in 10 steps\n\n Converged to III-E K412[4][all][Fe=0.0806,Al=0.0484,Si=0.2080,O=0.4323,Mg=\n0.1153,Ca=0.1088] in 10 steps","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Material O Mg Al Si Ca Fe Total\nIII-E K412[0][all] 0.4297 0.1148 0.04818 0.2073 0.1088 0.08051 0.9894\nIII-E K412[1][all] 0.4302 0.1148 0.04801 0.2069 0.1085 0.08077 0.9891\nIII-E K412[2][all] 0.4309 0.1151 0.04825 0.2076 0.1088 0.08054 0.9912\nIII-E K412[3][all] 0.4333 0.1152 0.0483 0.208 0.109 0.0805 0.9944\nIII-E K412[4][all] 0.4323 0.1153 0.04838 0.208 0.1088 0.08061 0.9934","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Finally plot the results as mass fractions.","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"plot(quant, known=unks[1][:Composition])","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"(Image: )","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Plot the difference from the SRM value.","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"plot(quant, known=unks[1][:Composition], delta=true)","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"(Image: )","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"Plot the difference from the mean value for each element.","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"plot(quant, delta=true)","category":"page"},{"location":"K412fit/","page":"Fitting K412","title":"Fitting K412","text":"(Image: )","category":"page"},{"location":"continuummodel/#Modeling-the-Continuum","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"","category":"section"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"Nicholas W. M. Ritchie 9-Jun-2020","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"Modeling the continuum (Bremsstrahlung) is a necessary component of being able to perform an straight (unfiltered) spectrum fit.  These models can either be used to handle the continuum for linear or non-linear spectrum fits.","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"using NeXLSpectrum\nusing NeXLMatrixCorrection\nusing Gadfly\nusing Colors","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"The ContinuumModel handles the generation of Bremsstrahlung within the sample, the absorption of the generated X-rays as they exit the sample and the efficiency of the detector collecting the X-rays.","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"e0 = 15.0e3\neff = SDDEfficiency(AP33Tabulation(); thickness=0.0370, deadlayer=30.0e-7, entrance=Film(pure(n\"Al\"), 10.0e-7))\n#eff = SDDEfficiency(NoWindow(); thickness=100.0, deadlayer=0.0e-7, entrance=Film(pure(n\"Al\"), 0.0e-7))\ncmod = ContinuumModel(mat\"0.8*Fe+0.15*Cr+0.05*Ni\", e0, deg2rad(40.0))\nplot([ea->emitted(cmod, ea),ea->generated(cmod, ea)],100.0,e0)","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"e0 = 5.0e3\ncmod = ContinuumModel(mat\"SiO2\", e0, deg2rad(40.0))\nplot([ea->emitted(cmod, ea),ea->generated(cmod, ea)],100.0,e0)","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"det = simpleEDS(4096, 5.0, 0.0, 132.0, 10)\ne0 = 5.0e3\ncmod = ContinuumModel(mat\"0.8*Fe+0.15*Cr+0.05*Ni\", e0, deg2rad(40.0))\nresp = NeXLSpectrum.detectorresponse(det, eff)\nemt = map(ch->ch>=lld(det) ? emitted(cmod,energy(ch,det)) : 0.0,1:channelcount(det))\nmeas =  resp*emt\nlyrs = [ layer(x=energyscale(det), y=emt, Geom.line, Theme(default_color=\"red\")), layer(x=energyscale(det), y=meas, Geom.line) ]\nplot(lyrs..., Coord.cartesian(xmin=0, xmax=e0))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/#Models!!!","page":"Modeling the Continuum","title":"Models!!!","text":"","category":"section"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"model, mc = Castellano2004a, Riveros1993\neff = SDDEfficiency(AP33Tabulation(); thickness=0.0370, deadlayer=30.0e-7, entrance=Film(pure(n\"Al\"), 10.0e-7))\n\nspec = loadspectrum(joinpath(\"K412 spectra\",\"III-E K412[0][4].msa\"))\ndet=matching(spec, 132.0, 10)\nroi = channel(4.5e3,det):channel(6.0e3,det)\n\nspec = loadspectrum(joinpath(\"K412 spectra\",\"III-E K412[0][4].msa\"))\ncmod = ContinuumModel(spec[:Composition], spec[:BeamEnergy], spec[:TakeOffAngle], bremsstrahlung=model)\nemt = map(ch->ch>=lld(det) ? emitted(cmod,energy(ch,det)) : 0.0,1:channelcount(det))\nresp = NeXLSpectrum.detectorresponse(det, eff)\nmeas = resp*emt\n\nplot(layer(x=eachindex(emt),y=emt, Geom.line),layer(x=eachindex(meas),y=meas, Geom.point))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"spec = loadspectrum(joinpath(\"K412 spectra\",\"III-E K412[0][4].msa\"))\nbrem = fitcontinuum(spec, resp, [roi], brem=model, mc=mc)\nprintln(\"k = $(brem[:K]/dose(spec))\")","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"k = 0.0003623235657382984","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nplot(spec, brem, yscale=0.05, xmax=12.0e3)","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"spec = loadspectrum(joinpath(\"K412 spectra\",\"Al2O3 std.msa\"))\nbrem = fitcontinuum(spec, resp, [roi], brem=model, mc=mc)\nprintln(\"k = $(brem[:K]/dose(spec))\")","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"k = 1.5898069774856187e-5","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"plot(spec, brem, yscale=0.01, xmax=8.0e3)","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"spec = loadspectrum(joinpath(\"K412 spectra\",\"SiO2 std.msa\"))\nbrem = fitcontinuum(spec, resp, [roi], brem=model, mc=mc)\nprintln(\"k = $(brem[:K]/dose(spec))\")","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"k = 1.5971662200794155e-5","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"plot(spec, brem, yscale=0.01, xmax=8.0e3)","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"spec = loadspectrum(joinpath(\"K412 spectra\",\"MgO std.msa\"))\nbrem = fitcontinuum(spec, resp, [roi], brem=model, mc=mc)\nprintln(\"k = $(brem[:K]/dose(spec))\")","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"k = 1.583130100441223e-5","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"plot(spec, brem, yscale=0.01, xmax=8.0e3)","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"spec = loadspectrum(joinpath(\"K412 spectra\",\"CaF2 std.msa\"))\nbrem = fitcontinuum(spec, resp, [roi], brem=model, mc=mc)\nprintln(\"k = $(brem[:K]/dose(spec))\")","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"k = 1.5134094286348814e-5","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"plot(spec, brem, yscale=0.05, xmax=8.0e3)","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"spec = loadspectrum(joinpath(\"K412 spectra\",\"Fe std.msa\"))\nbrem = fitcontinuum(spec, resp, [ channel(2.0e3,det):channel(4.0e3,det)], brem=model, mc=mc)\nprintln(\"k = $(brem[:K]/dose(spec))\")","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"k = 1.797044940058196e-5","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"plot(spec, brem, yscale=0.05, xmax=8.0e3)","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"spec = loadspectrum(joinpath(\"K412 spectra\",\"III-E K412[0][4].msa\"))\ndisplay(plot(spec, subtractcontinuum(spec, det, resp), yscale=0.05, xmax=8.0e3))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"K412 spectra\",\"Al2O3 std.msa\"))\ndisplay(plot(spec, subtractcontinuum(spec, det, resp), yscale=0.05, xmax=8.0e3))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"K412 spectra\",\"SiO2 std.msa\"))\ndisplay(plot(spec, subtractcontinuum(spec, det, resp), yscale=0.05, xmax=8.0e3))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"K412 spectra\",\"MgO std.msa\"))\ndisplay(plot(spec, subtractcontinuum(spec, det, resp), yscale=0.05, xmax=8.0e3))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"K412 spectra\",\"CaF2 std.msa\"))\ndisplay(plot(spec, subtractcontinuum(spec, det, resp), yscale=0.05, xmax=8.0e3))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"K412 spectra\",\"Fe std.msa\"))\ndisplay(plot(spec, subtractcontinuum(spec, det, resp), yscale=0.05, xmax=8.0e3))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"K412 spectra\",\"Fe std.msa\"))\ndisplay(plot(spec, subtractcontinuum(spec, det, resp), yscale=0.05, xmax=8.0e3))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"spectra\",\"Ag std.msa\"))\ndisplay(plot(spec, fittedcontinuum(spec, det, resp, mode=:Global), fittedcontinuum(spec, det, resp, mode=:Local), yscale=0.05))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"spectra\",\"Au std.msa\"))\ndisplay(plot(spec, fittedcontinuum(spec, det, resp, mode=:Global), fittedcontinuum(spec, det, resp, mode=:Local), yscale=0.05))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"spectra\",\"B std.msa\"))\ndisplay(plot(spec, fittedcontinuum(spec, det, resp, mode=:Global), fittedcontinuum(spec, det, resp, mode=:Local), yscale=0.5))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"spectra\",\"Bi std.msa\"))\ndisplay(plot(spec, fittedcontinuum(spec, det, resp, mode=:Global), fittedcontinuum(spec, det, resp, mode=:Local), yscale=0.05))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"spectra\",\"BN std.msa\"))\ndisplay(plot(spec, fittedcontinuum(spec, det, resp, mode=:Global), fittedcontinuum(spec, det, resp, mode=:Local), yscale=0.20))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"\nspec = loadspectrum(joinpath(\"spectra\",\"C std.msa\"))\ndisplay(plot(spec, fittedcontinuum(spec, det, resp, mode=:Global), fittedcontinuum(spec, det, resp, mode=:Local), yscale=0.05))","category":"page"},{"location":"continuummodel/","page":"Modeling the Continuum","title":"Modeling the Continuum","text":"(Image: )","category":"page"},{"location":"#![](NeXL_sm.png)Spectrum-Part-of-the-NeXL-X-ray-Microanalysis-Library","page":"Home","title":"(Image: )Spectrum - Part of the NeXL X-ray Microanalysis Library","text":"","category":"section"},{"location":"#Installing-NeXLSpectrum.jl","page":"Home","title":"Installing NeXLSpectrum.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NeXLSpectrum is available throught the standard Julia registry and can be installed using the standard package manager.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]add NeXLSpectrum","category":"page"},{"location":"","page":"Home","title":"Home","text":"or","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\r\njulia> Pkg.add(\"NeXLSpectrum\")","category":"page"},{"location":"#Microanalytical-X-ray-Spectrum-Analysis","page":"Home","title":"Microanalytical X-ray Spectrum Analysis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NeXLSpectrum is a library of tools for manipulating EDS spectrum within the NeXL framework. NeXLSpectrum depends on NeXLUncertainties, NeXLCore and NeXLMatrixCorrection and loading NeXLSpectrum will also make these libraries available.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Primarily, NeXLSpectrum","category":"page"},{"location":"","page":"Home","title":"Home","text":"Implements the Spectrum type to represent individual EDS spectra\nReads Spectrum objects from disk files (or other streams) in EMSA, Bruker and ASPEX formats\nWrites Spectrum objects to a disk file in EMSA format\nProvides utilities and other low level tools to interogate and manipulate Spectrum objects\nImplements the HyperSpectrum type to represent hyper-spectra (linescan, image, cube, ...)\nThe individual pixels in a hyper-spectrum are visible as Spectrum objects\nReads HyperSpectrum objects from LISPIX-style RPL/RAW files\nWrites HyperSpectrum objects to RPL/RAW files","category":"page"},{"location":"","page":"Home","title":"Home","text":"Provides data types to define detector properties\nExtends Gadfly.jl to plot spectra and spectrum-related items\nProvides algorithms to perform Schamber-style filter-fitting of spectra\nImplements a basic weighted LLSQ fit algorithm\nFits characteristic, escape, Compton and other features\nImplements a 'vector-based' quick-quant algorithm for processing hyper-spectra","category":"page"},{"location":"spectrum/#![](NeXL_sm.png)Spectrum","page":"Spectrum Methods","title":"(Image: )Spectrum","text":"","category":"section"},{"location":"spectrum/#Working-with-Spectrum-objects","page":"Spectrum Methods","title":"Working with Spectrum objects","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"CurrentModule = NeXLSpectrum","category":"page"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"The Spectrum type represents a single spectrum with associated properties. The channel data is indexed like a Vector.  The property data is indexed using Symbol objects.  A set of spectrum properties are defined in the library and the user can create additional ones.","category":"page"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"In addition to the Vector-like properties, the Spectrum associates energy bins with each channel.  The energy bins are continuous, non-overlapping and monotonic.  Functions like energy(...) maps channel index to energies and channel(...) to make energies to channel index.  ","category":"page"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"Spectrum","category":"page"},{"location":"spectrum/#NeXLSpectrum.Spectrum","page":"Spectrum Methods","title":"NeXLSpectrum.Spectrum","text":"Spectrum{T<:Real} <: AbstractVector{T}\n\nSpectrum(energy::EnergyScale, data::Vector{<:Real}, props::Dict{Symbol,Any})\n\nConstruct a structure to hold spectrum data (energy scale, counts and metadata).\n\nSee NeXLSpectrum.EnergyScale or NeXLSpectrum.LinearEnergyScale\n\nExample:\n\njulia> spec = Spectrum(LinearEnergyScale(0.0,10.0),\n                 collect(1:1024),\n                 Dict{Symbol,Any}(:BeamEnergy=>10.0e3, :LiveTime=>30.0))\n                                                                              ** 1024.0\n                                                                       *********\n                                                               *****************\n                                                        ************************\n                                                 *******************************\n                                          **************************************\n                                   *********************************************\n                            ****************************************************\n                     ***********************************************************\n              ******************************************************************\n       *************************************************************************\n******************************************************************************** 10.0 keV\nSpectrum[3062][10.0 keV, Unknown, 525000.0 counts]\n\nSpectrum implements indexing using various different mechanisms.  If spec is a Spectrum then\n\nspec[123] # will return the number of counts in channel 123\nspec[123:222] # will return a Vector of counts from channel 123:222\nspec[134.] # will return the number of counts in the channel at energy 134.0 eV\nspec[134.0:270.0] # will return a Vector of counts for channels with energies between 134.0 eV and 270.0 eV\nspec[:Comment] # will return the property named :Comment\n\nMetadata is identified by a symbol. These Symbols are used within NeXLSpectrum.\n\n:BeamEnergy    # In eV\n:Elevation     # In radians\n:TakeOffAngle  # In radians (Detector position)\n:Azimuthal     # In radians (Detector position)\n:WorkingDistance # In cm\n:LiveTime      # In seconds\n:RealTime      # In seconds\n:ProbeCurrent  # In nano-amps\n:Name          # A string\n:Owner         # A string\n:StagePosition # A Dict{Symbol,Real} with entries :X, :Y, :Z, :R, :T, B: in cm and degrees\n:Comment       # A string\n:Composition   # A Material (known composition, not measured)\n:Elements      # A collection of elements in the material\n:ReferenceROIS # A collection of reference ROIs (as Vector{ReferenceROI})\n:Detector      # A Detector like a BasicEDS or another EDSDetector\n:Filename      # Source filename\n:Coating       # A Film or Film[] (eg. 10 nm of C|Au etc.)\n:AcquisitionTime # Date and time of acquisition (DateTime struct)\n:Signature     # Dict{Element,Real} with the \"particle signature\"\n\nLess common items:\n\n:ImageMag\t   # Magnification (assuming a 3.5\" image) of the first image\n:ImageZoom     # Additional zoom for second image in a two image TIFF\n:Operator      # Analyst in ASPEX TIFF files\n:Image1, :Image2 ... # Images associated with the spectrum\n:BrukerThroughtput # Nominal throughtput setting on a Bruker detector\n:DetectorSerialNumber # EDS detector serial number\n:DetectorModel # Vendor model name\n:DetectorThickness # Thickness of detector active area\n:DeadLayerThickness # Thickness of Si dead layer on the entrance surface of the detector\n:Window        # Window construction details\n:DetectorSolidAngle # Collection solid angle of the X-ray detector\n:ChamberPressure # Vacuum presure in the sample chamber\n:ChamberAtmosphere # Nominally the composition of the residual gas in the chamber\n\nXRF related items:\n\n:BeamEnergy  # Accelarating voltage within X-ray tube (eV)\n:XRFTubeAnode    # Element from which the X-ray tube is constructed\n:ProbeCurrent  # Electron current in the X-ray tube\n:XRFTubeIncidentAngle # Incident angle of electron beam in tube\n:XRFTubeTakeOffAngle # Take-off angle from tube\n:XRFExcitationAngle # Angle of incidence of the X-ray beam on the sample\n:XRFDetectionAngle # Angle of the detector relative to the sample\n:XRFExcitationPathLength # Distance from X-ray source to sample\n:XRFDetectionPathLength # Distance from the sample to the X-ray detector\n:XRFSampleTilt    #  Additional tilt of the sample\n:XRFTubeWindow   # Construction of the tube window\n\nNot all spectra will define all properties.  Algorithms can define the NeXLCore.minproperties(ty::Type) method to specify which properties are required by an algorithm of ty::Type.  Then hasminrequired and requiredbutmissing methods will determine whether a Spectrum or Dict{Symbol,Any} is suitable for an algorithm.\n\n\n\n\n\n","category":"type"},{"location":"spectrum/#Acccessing-Properties","page":"Spectrum Methods","title":"Acccessing Properties","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"Most properties are accessed using spec[:Symbol] notation.  Some combined or special properties have special methods.","category":"page"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"dose\r\nelms(::Spectrum)","category":"page"},{"location":"spectrum/#NeXLSpectrum.dose","page":"Spectrum Methods","title":"NeXLSpectrum.dose","text":"dose(spec::Spectrum, def=missing)\ndose(spec::Spectrum)\n\nThe probe dose in nano-amp seconds\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLCore.elms-Tuple{Spectrum}","page":"Spectrum Methods","title":"NeXLCore.elms","text":"elms(spec::Spectrum, withcoating = false, def=missing)\n\nReturns a list of the elements associated with this spectrum. withcoating determines whether the coating elements are also added.\n\n\n\n\n\n","category":"method"},{"location":"spectrum/#Displaying-Spectrum-Data","page":"Spectrum Methods","title":"Displaying Spectrum Data","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"asa\r\nBase.keys\r\nBase.haskey\r\nGadfly.plot","category":"page"},{"location":"spectrum/#NeXLUncertainties.asa","page":"Spectrum Methods","title":"NeXLUncertainties.asa","text":"NeXLUncertainties.asa(::Type{DataFrame}, spec::Spectrum; properties::Bool = false)\n\nConverts the spectrum energy and counts data into a DataFrame.\n\n\n\n\n\nNeXLUncertainties.asa(::Type{DataFrame}, spec::AbstractVector{Spectrum})::DataFrame\n\nReturns a DataFrame that summarizes the list of spectra.\n\n\n\n\n\nNeXLUncertainties.asa(::Type{DataFrame}, spec::AbstractDict{Element, Spectrum})::DataFrame\n\nReturns a DataFrame that summarizes a dictionary of standard spectra.\n\n\n\n\n\nNeXLUncertainties.asa(::Type{DataFrame}, ffrs::AbstractVector{<:FitResult}; charOnly = true, withUnc = false, pivot = false)\n\nReturn generic FitResult as a DataFrame.\n\n\n\n\n\nNeXLUncertainties.asa(::Type{DataFrame}, ffr::FilterFitResult)::DataFrame\n\nTabulate details about each region-of-interest in the 'FilterFitResult' in a 'DataFrame'.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Base.keys","page":"Spectrum Methods","title":"Base.keys","text":"Base.keys(spec::Spectrum)\n\nReturn the defined properties as a set of Symbols.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Base.haskey","page":"Spectrum Methods","title":"Base.haskey","text":"Base.haskey(spec::Spectrum, sym::Symbol)\n\nIs the specified key defined?\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Gadfly.plot","page":"Spectrum Methods","title":"Gadfly.plot","text":"plot(\n    specs::Union{Spectrum...,AbstractVector{Spectrum{<:Real}}};\n    klms=[],\n    edges=[],\n\tescapes=[],\n\tcoincidences=[],\n    autoklms = false,\n    xmin=0.0,\n    xmax=missing,\n    norm=:None,\n    yscale=1.05,\n    ytransform = identity,\n\tstyle=NeXLSpectrumStyle,\n\tpalette=NeXLPalette\n)::Plot\n\nRequired:\n\nspecs::AbstractVector{Spectrum};\n\nNamed:\n\nklms = [ Element &| CharXRay ]\nedges = [ Element &| AtomicSubShell ]\nescapes = [ CharXRay ],\ncoincidences = [ CharXRay ]\nautoklms = false # Add KLMs based on elements in spectra\nxmin = 0.0 # Min energy (eV)\nxmax = missing # Max energy (eV) (defaults to max(:BeamEnergy))\nnorm = NoScaling() | ScaleDoseWidth() | ScaleDose() | ScaleSum() | ScaleROISum() | ScalePeak() | (<: SpectrumScaling)()\nyscale = 1.05 # Fraction of max intensity for ymax over [max(lld,xmin):xmax]\nytransform = identity | log10 | sqrt | ??? # How to transform the counts data before plotting\nstyle=NeXLSpectrumStyle (or another Gadfly.style)\npalette = NeXLPalette | Colorant[ ... ] # Colors for spectra...\ncustomlayers = Gadfly.Layer[] # Allows additional plot layers to be added\n\nPlot a multiple spectra on a single plot using Gadfly.\n\nGadfly.plot(\n  ffr::FilterFitResult,\n  roi::Union{Missing,UnitRange{Int}} = missing;\n  palette = NeXLPalette,\n  style = NeXLSpectrumStyle, xmax=missing)\n\nPlot the spectrum, residual and k-ratios using Gadfly.\n\nGadfly.plot(fr::FilteredReference)\n\nPlot a filtered reference spectrum.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Energy-Scale-Functions","page":"Spectrum Methods","title":"Energy Scale Functions","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"These functions handle mapping channel index to energies and vice versa.","category":"page"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"NeXLCore.energy\r\nchannel\r\nrangeofenergies\r\nchannelwidth\r\nenergyscale","category":"page"},{"location":"spectrum/#NeXLCore.energy","page":"Spectrum Methods","title":"NeXLCore.energy","text":"NeXLCore.energy(ch::Integer, sc::EnergyScale)\nNeXLCore.energy(ch::Int, spec::Spectrum)\nNeXLCore.energy(ch::Int, det::EDSDetector)\n\nReturns the energy (in eV) for the low energy side of the bin representing the ch-th channel.\n\nExample:\n\nles = LinearEnergyScale(3.0, 10.1)\nenergy(101,lsc) == 10.1*101 + 3.0\nenergy(101,lsc) - energy(100,lsc) == 10.1\npes = PolyEnergyScale([ 3.0, 10.1, 0.001])\nenergy(101,pes) ==  3.0 + 10.0*101 + 0.001*101^2\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.channel","page":"Spectrum Methods","title":"NeXLSpectrum.channel","text":"channel(eV::AbstractFloat, sc::EnergyScale)\nchannel(eV::Float64, spec::Spectrum)\nchannel(eV::Float64, det::EDSDetector)\n\nReturns the integer index of the channel for the specified energy X-ray (in eV).\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.rangeofenergies","page":"Spectrum Methods","title":"NeXLSpectrum.rangeofenergies","text":"rangeofenergies(spec::Spectrum, ch)\n\nReturns the low and high energy extremes for the channels ch.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.channelwidth","page":"Spectrum Methods","title":"NeXLSpectrum.channelwidth","text":"channelwidth(ch::Int, spec::Spectrum)::Float64\n\nReturns the width of the ch channel in eV.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.energyscale","page":"Spectrum Methods","title":"NeXLSpectrum.energyscale","text":"energyscale(es::EnergyScale, channels)\nenergyscale(det::EDSDetector)\n\nComputes the energy associated with a range of channel indexes and returns it as an Array.\n\n\n\n\n\nenergyscale(spec::Spectrum)\n\nReturns an array with the bin-by-bin energies\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Extracting-the-Counts-Data","page":"Spectrum Methods","title":"Extracting the Counts Data","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"The channel data in a Spectrum object spec can be get/set using standard Array indexing techniques.","category":"page"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"> spec[123]\r\n> spec[123:345]\r\n> spec[1234.0] # Channel containing energy 1234.0 eV\r\n> spec[123] = 99","category":"page"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"Alternatively, the counts(...) method can be used.","category":"page"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"counts","category":"page"},{"location":"spectrum/#NeXLSpectrum.counts","page":"Spectrum Methods","title":"NeXLSpectrum.counts","text":"counts(spec::Spectrum, numType::Type{T}, applyLLD=false)::Vector{T} where {T<:Number}\ncounts(spec::Spectrum, channels::AbstractUnitRange{<:Integer}, numType::Type{T}, applyLLD=false)::Vector{T} where {T<:Number}\n\nCreates a copy of the spectrum counts data as the specified Number type. If the spectrum has a :Detector property then the detector's lld (low-level discriminator) and applyLLD=true then the lld is applied to the result by setting all channels less-than-or-equal to det.lld to zero.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"counts(...) can apply the :LLD property to zero counts below a specified channel.","category":"page"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"lld","category":"page"},{"location":"spectrum/#NeXLSpectrum.lld","page":"Spectrum Methods","title":"NeXLSpectrum.lld","text":"lld(det::EDSDetector)\n\nLow level detection limit in channels.  Channels at or below this value will be zeroed when the lld is applied.\n\n\n\n\n\nlld(spec::Spectrum)\n\nGets the low-level discriminator associated with this spectrum if there is one.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Defining-Detectors","page":"Spectrum Methods","title":"Defining Detectors","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"Build a detector to match the data in a Spectrum.","category":"page"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"simpleEDS\r\nmatching","category":"page"},{"location":"spectrum/#NeXLSpectrum.simpleEDS","page":"Spectrum Methods","title":"NeXLSpectrum.simpleEDS","text":"simpleEDS(chCount::Integer, width::Float64, offset::Float64, fwhmatmnka::Float64, lld::Int = channel(150.0 eV))\n\nConstruct simple model of an EDS detector.\n\n\n\n\n\nsimpleEDS(spec::Spectrum, fwhmatmnka::Float64)\n\nBuild a EDSDetector object for this spectrum with the specified FWHM at Mn Kα.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.matching","page":"Spectrum Methods","title":"NeXLSpectrum.matching","text":"matching(spec::Spectrum, resMnKa::Float64, lld::Int=1)::BasicEDS\n\nBuild an EDSDetector to match the channel count and energy scale in this spectrum.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Statistical-Sub-Sampling","page":"Spectrum Methods","title":"Statistical Sub-Sampling","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"NeXLSpectrum.subdivide\r\nNeXLSpectrum.subsample\r\n","category":"page"},{"location":"spectrum/#NeXLSpectrum.subdivide","page":"Spectrum Methods","title":"NeXLSpectrum.subdivide","text":"subdivide(spec::Spectrum, n::Int)::Vector{Spectrum}\n\nSplits the event data in one spectrum into n spectra by assigning each event to a pseudo-random choice of one of the n result spectra.  Produces n spectra that act as though the original spectrum was collected in n time intervals of LiveTime/n.  This is quite slow because it needs to call rand() for each count in the spectrum (not just each channel).\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.subsample","page":"Spectrum Methods","title":"NeXLSpectrum.subsample","text":"subsample(spec::Spectrum, frac::Float64)\n\nSubsample the counts data in a spectrum according to a statistically valid algorithm.  Returns spec if frac>=1.0.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Processing-Channel-Data","page":"Spectrum Methods","title":"Processing Channel Data","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"kratio\r\nintegrate\r\nestimatebackground\r\nmodelBackground\r\nextractcharacteristic\r\npeak\r\nbackground\r\npeaktobackground\r\nestkratio","category":"page"},{"location":"spectrum/#NeXLSpectrum.kratio","page":"Spectrum Methods","title":"NeXLSpectrum.kratio","text":"kratio(unk::Spectrum, std::Spectrum, back1::AbstractUnitRange{<:Integer}, peak::AbstractUnitRange{<:Integer}, back2::AbstractUnitRange{<:Integer})::UncertainValue\nkratio(unk::Spectrum, std::Spectrum, back1::StepRangeLen{Float64}, peak::StepRangeLen{Float64}, back2::StepRangeLen{Float64})::UncertainValue\n\nThe k-ratio of unk relative to std corrected for dose.  Requires that unk and std have the properties :LiveTime and :ProbeCurrent defined.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.integrate","page":"Spectrum Methods","title":"NeXLSpectrum.integrate","text":"integrate(spec::Spectrum, channels::AbstractUnitRange{<:Integer})\nintegrate(spec::Spectrum, energyRange::StepRangeLen{Float64})\n\nSums all the counts in the specified channels.  No background correction.\n\nintegrate(spec::Spectrum, back1::AbstractUnitRange{<:Integer}, peak::AbstractUnitRange{<:Integer}, back2::AbstractUnitRange{<:Integer})::UncertainValue\nintegrate(spec::Spectrum, back1::StepRangeLen{Float64}, peak::StepRangeLen{Float64}, back2::StepRangeLen{Float64})::UncertainValue\n\nSums all the counts in the specified channels with background correction using the background intervals.\n\nintegrate(spec::Spectrum)\n\nTotal integral of all counts from the LLD to the beam energy\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.estimatebackground","page":"Spectrum Methods","title":"NeXLSpectrum.estimatebackground","text":"estimatebackground(data::AbstractArray{Float64}, channel::Int, width::Int=5, order::Int=2)\n\nReturns the tangent to the a quadratic fit to the counts data centered at channel with width\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.modelBackground","page":"Spectrum Methods","title":"NeXLSpectrum.modelBackground","text":"modelBackground(spec::Spectrum, chs::AbstractUnitRange{<:Integer}, ash::AtomicSubShell)\n\nspec: A spectrum containing a peak centered on chs chs:  A range of channels containing a peak ash:  The edge (as an AtomicSubShell)\n\nA simple model for modeling the background under a characteristic x-ray peak. The model fits a line to low and high energy background regions around firsr(chs) and last(chs). If the low energy line extended out to the edge energy is larger than the high energy line at the same energy, then a negative going edge is fit between the two. Otherwise a line is fit between the low energy side and the high energy side. This model only works when there are no peak interference over the range chs.\n\nmodelBackground(spec::Spectrum, chs::AbstractUnitRange{<:Integer})\nmodelBackground(spec::Spectrum, chs::AbstractUnitRange{<:Integer}, ash::AtomicSubShell)\n\nspec: A spectrum containing a peak centered on chs chs:  A range of channels containing a peak ash:  The largest edge within the range of channels chs associated with the characteristic peak\n\nA simple model for modeling the background under a characteristic x-ray peak. The model fits a line between the  low and high energy background regions around first(chs) and last(chs). This model only works when there are no peak interference over the range chs.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.extractcharacteristic","page":"Spectrum Methods","title":"NeXLSpectrum.extractcharacteristic","text":"extractcharacteristic(spec::Spectrum, lowBack::AbstractUnitRange{<:Integer}, highBack::AbstractUnitRange{<:Integer})::Vector{Float64}\n\nExtract the characteristic intensity for the peak located within chs with an edge at ash.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.peak","page":"Spectrum Methods","title":"NeXLSpectrum.peak","text":"peak(spec::Spectrum, chs::AbstractUnitRange{<:Integer}, ash::AtomicSubShell)::Float64\n\nEstimates the peak intensity for the characteristic X-ray in the specified range of channels.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.background","page":"Spectrum Methods","title":"NeXLSpectrum.background","text":"background(spec::Spectrum, chs::AbstractUnitRange{<:Integer}, ash::AtomicSubShell)::Float64\n\nEstimates the background intensity for the characteristic X-ray in the specified range of channels.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.peaktobackground","page":"Spectrum Methods","title":"NeXLSpectrum.peaktobackground","text":"peaktobackground(spec::Spectrum, chs::AbstractUnitRange{<:Integer}, ash::AtomicSubShell)::Float64\n\nEstimates the peak-to-background ratio for the characteristic X-ray intensity in the specified range of channels which encompass the specified AtomicSubShell.\n\n\n\n\n\npeaktobackground(ffr::FilterFitResult, backwidth::Float64=10.0)::Float64\n\nThe peak-to-background ratio as determined from the raw and residual spectra integrated over the fit region-of-interest and scaled to backwidth eV of continuum (nominally 10 eV).\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.estkratio","page":"Spectrum Methods","title":"NeXLSpectrum.estkratio","text":"estkratio(unk::Spectrum, std::Spectrum, chs::AbstractUnitRange{<:Integer})\n\nEstimates the k-ratio from niave models of peak and background intensity.  Only works if the peak is not interfered.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Miscellaneous-Functions","page":"Spectrum Methods","title":"Miscellaneous Functions","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum Methods","title":"Spectrum Methods","text":"details\r\ncommonproperties\r\nmaxspectrum\r\nBase.findmax","category":"page"},{"location":"spectrum/#NeXLSpectrum.details","page":"Spectrum Methods","title":"NeXLSpectrum.details","text":"details(io, spec::Spectrum)\ndetails(spec::Spectrum)\n\nOutputs a description of the data in the spectrum.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.commonproperties","page":"Spectrum Methods","title":"NeXLSpectrum.commonproperties","text":"commonproperties(specs::AbstractArray{Spectrum})\ncommonproperties(props1::Dict{Symbol,Any}, props2::Dict{Symbol,Any})\n\nReturn the properties that are held in common by all the spectra.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#NeXLSpectrum.maxspectrum","page":"Spectrum Methods","title":"NeXLSpectrum.maxspectrum","text":"maxspectrum(specs::AbstractArray{Spectrum{T}})::Spectrum{T} where T<:Real\n\nCompute the max-pixel spectrum for the specified spectra.\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Base.findmax","page":"Spectrum Methods","title":"Base.findmax","text":"Base.findmax(spec::Spectrum, chs::AbstractRange{<:Integer})\nBase.findmax(spec::Spectrum)\n\nReturns the (maximum intensity, channel index) over the specified range of channels\n\n\n\n\n\n","category":"function"}]
}
